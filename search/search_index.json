{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"unikmer: a versatile toolkit for k-mers with taxonomic information","text":"<p>Documents: https://bioinf.shenwei.me/unikmer/</p> <p><code>unikmer</code> is a toolkit for nucleic acid k-mer analysis,  providing functions including set operation k-mers (sketch) optional with TaxIds but without count information.</p> <p>K-mers are either encoded (k&lt;=32) or hashed (k&lt;=64, using ntHash v1) into <code>uint64</code>, and serialized in binary file with extension <code>.unik</code>.</p> <p>TaxIds can be assigned when counting k-mers from genome sequences, and LCA (Lowest Common Ancestor) is computed during set opertions including computing union, intersecton, set difference, unique and repeated k-mers.</p> <p>Related projects:</p> <ul> <li>kmers provides bit-packed k-mers methods for this tool.</li> <li>unik provides k-mer serialization methods for this tool.</li> <li>sketches provides generators/iterators for k-mer sketches  (Minimizer,  Scaled MinHash,  Closed Syncmers).</li> <li>taxdump provides querying manipulations from NCBI Taxonomy taxdump files.</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Using cases</li> <li>Installation</li> <li>Commands</li> <li>Binary file</li> <li>Quick start</li> <li>Support</li> <li>License</li> </ul>"},{"location":"#using-cases","title":"Using cases","text":"<ul> <li>Finding conserved regions in all genomes of a species.</li> <li>Finding species/strain-specific sequences for designing probes/primers.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Downloading executable binary files.</p> </li> <li> <p>Via Bioconda  </p> <pre><code>conda install -c bioconda unikmer\n</code></pre> </li> </ol>"},{"location":"#commands","title":"Commands","text":"<p>Usages</p> <ol> <li> <p>Counting</p> <pre><code>count           Generate k-mers (sketch) from FASTA/Q sequences\n</code></pre> </li> <li> <p>Information</p> <pre><code>info            Information of binary files\nnum             Quickly inspect the number of k-mers in binary files\n</code></pre> </li> <li> <p>Format conversion</p> <pre><code>view            Read and output binary format to plain text\ndump            Convert plain k-mer text to binary format\n\nencode          Encode plain k-mer texts to integers\ndecode          Decode encoded integers to k-mer texts\n</code></pre> </li> <li> <p>Set operations</p> <pre><code>concat          Concatenate multiple binary files without removing duplicates\ninter           Intersection of k-mers in multiple binary files\ncommon          Find k-mers shared by most of the binary files\nunion           Union of k-mers in multiple binary files\ndiff            Set difference of k-mers in multiple binary files\n</code></pre> </li> <li> <p>Split and merge</p> <pre><code>sort            Sort k-mers to reduce the file size and accelerate downstream analysis\nsplit           Split k-mers into sorted chunk files\ntsplit          Split k-mers according to TaxId\nmerge           Merge k-mers from sorted chunk files\n</code></pre> </li> <li> <p>Subset</p> <pre><code>head            Extract the first N k-mers\nsample          Sample k-mers from binary files\ngrep            Search k-mers from binary files\nfilter          Filter out low-complexity k-mers\nrfilter         Filter k-mers by taxonomic rank\n</code></pre> </li> <li> <p>Searching on genomes</p> <pre><code>locate          Locate k-mers in genome\nmap             Mapping k-mers back to the genome and extract successive regions/subsequences\n</code></pre> </li> <li> <p>Misc</p> <pre><code>autocompletion  Generate shell autocompletion script\nversion         Print version information and check for update\n</code></pre> </li> </ol>"},{"location":"#binary-file","title":"Binary file","text":"<p>K-mers (represented in <code>uint64</code> in RAM ) are serialized in 8-Byte (or less Bytes for shorter k-mers in compact format, or much less Bytes for sorted k-mers) arrays and optionally compressed in gzip format with extension of <code>.unik</code>. TaxIds are optionally stored next to k-mers with 4 or less bytes.</p>"},{"location":"#compression-ratio-comparison","title":"Compression ratio comparison","text":"<p>No TaxIds stored in this test.</p> <p></p> label encoded-kmer<sup>a</sup> gzip-compressed<sup>b</sup> compact-format<sup>c</sup> sorted<sup>d</sup> comment <code>plain</code> plain text <code>gzip</code> \u2714 gzipped plain text <code>unik.default</code> \u2714 \u2714 gzipped encoded k-mers in fixed-length byte array <code>unik.compat</code> \u2714 \u2714 \u2714 gzipped encoded k-mers in shorter fixed-length byte array <code>unik.sorted</code> \u2714 \u2714 \u2714 gzipped sorted encoded k-mers <ul> <li><sup>a</sup> One k-mer is encoded as <code>uint64</code> and serialized in 8 Bytes.</li> <li><sup>b</sup> K-mers file is compressed in gzip format by default,   users can switch on global option <code>-C/--no-compress</code> to output non-compressed file.</li> <li><sup>c</sup> One k-mer is encoded as <code>uint64</code> and serialized in 8 Bytes by default.  However few Bytes are needed for short k-mers, e.g., 4 Bytes are enough for   15-mers (30 bits). This makes the file more compact with smaller file size,   controled by global option <code>-c/--compact</code>.</li> <li><sup>d</sup> One k-mer is encoded as <code>uint64</code>, all k-mers are sorted and compressed   using varint-GB algorithm.</li> <li>In all test, flag <code>--canonical</code> is ON when running <code>unikmer count</code>.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># memusg is for compute time and RAM usage: https://github.com/shenwei356/memusg\n\n\n# counting (only keep the canonical k-mers and compact output)\n# memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23 --canonical --compact\n$ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23 --canonical --compact\nelapsed time: 0.897s\npeak rss: 192.41 MB\n\n\n# counting (only keep the canonical k-mers and sort k-mers)\n# memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted --canonical --sort\n$ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted --canonical --sort\nelapsed time: 1.136s\npeak rss: 227.28 MB\n\n\n# counting and assigning global TaxIds\n$ unikmer count -k 23 -K -s Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted   -t 585057\n$ unikmer count -k 23 -K -s Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted -t 511145\n$ unikmer count -k 23 -K -s A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.sorted -t 349741\n\n# counting minimizer and ouputting in linear order\n$ unikmer count -k 23 -W 5 -H -K -l A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.m\n\n# view\n$ unikmer view Ecoli-MG1655.fasta.gz.k23.sorted.unik --show-taxid | head -n 3\nAAAAAAAAACCATCCAAATCTGG 511145\nAAAAAAAAACCGCTAGTATATTC 511145\nAAAAAAAAACCTGAAAAAAACGG 511145\n\n# view (hashed k-mers needs original FASTA/Q file)\n$ unikmer view --show-code --genome A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | head -n 3\nCATCCGCCATCTTTGGGGTGTCG 1210726578792\nAGCGCAAAATCCCCAAACATGTA 2286899379883\nAACTGATTTTTGATGATGACTCC 3542156397282\n\n# find the positions of k-mers\n$ unikmer locate -g A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | head -n 5\nNC_010655.1     2       25      ATCTTATAAAATAACCACATAAC 0       .\nNC_010655.1     5       28      TTATAAAATAACCACATAACTTA 0       .\nNC_010655.1     6       29      TATAAAATAACCACATAACTTAA 0       .\nNC_010655.1     9       32      AAAATAACCACATAACTTAAAAA 0       .\nNC_010655.1     13      36      TAACCACATAACTTAAAAAGAAT 0       .\n\n# info\n$ unikmer info *.unik -a -j 10\nfile                                              k  canonical  hashed  scaled  include-taxid  global-taxid  sorted  compact  gzipped  version     number  description\nA.muciniphila-ATCC_BAA-835.fasta.gz.m.unik       23  \u2713          \u2713       \u2715       \u2715                            \u2715       \u2715        \u2713        v5.0       860,900             \nA.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik  23  \u2713          \u2715       \u2715       \u2715                    349741  \u2713       \u2715        \u2713        v5.0     2,630,905             \nEcoli-IAI39.fasta.gz.k23.sorted.unik             23  \u2713          \u2715       \u2715       \u2715                    585057  \u2713       \u2715        \u2713        v5.0     4,902,266             \nEcoli-IAI39.fasta.gz.k23.unik                    23  \u2713          \u2715       \u2715       \u2715                            \u2715       \u2713        \u2713        v5.0     4,902,266             \nEcoli-MG1655.fasta.gz.k23.sorted.unik            23  \u2713          \u2715       \u2715       \u2715                    511145  \u2713       \u2715        \u2713        v5.0     4,546,632             \nEcoli-MG1655.fasta.gz.k23.unik                   23  \u2713          \u2715       \u2715       \u2715                            \u2715       \u2713        \u2713        v5.0     4,546,632\n\n\n# concat\n$ memusg -t unikmer concat *.k23.sorted.unik -o concat.k23 -c\nelapsed time: 1.020s\npeak rss: 25.86 MB\n\n\n\n# union\n$ memusg -t unikmer union *.k23.sorted.unik -o union.k23 -s\nelapsed time: 3.991s\npeak rss: 590.92 MB\n\n\n# or sorting with limited memory.\n# note that taxonomy database need some memory.\n$ memusg -t unikmer sort *.k23.sorted.unik -o union2.k23 -u -m 1M\nelapsed time: 3.538s\npeak rss: 324.2 MB\n\n$ unikmer view -t union.k23.unik | md5sum \n4c038832209278840d4d75944b29219c  -\n$ unikmer view -t union2.k23.unik | md5sum \n4c038832209278840d4d75944b29219c  -\n\n\n# duplicate k-mers\n# memusg -t unikmer sort *.k23.sorted.unik -o dup.k23 -d -m 1M # limit memory usage\n$ memusg -t unikmer sort *.k23.sorted.unik -o dup.k23 -d\nelapsed time: 1.143s\npeak rss: 240.18 MB\n\n\n# intersection\n$ memusg -t unikmer inter *.k23.sorted.unik -o inter.k23\nelapsed time: 1.481s\npeak rss: 399.94 MB\n\n\n# difference\n$ memusg -t unikmer diff -j 10 *.k23.sorted.unik -o diff.k23 -s\nelapsed time: 0.793s\npeak rss: 338.06 MB\n\n\n$ ls -lh *.unik\n-rw-r--r-- 1 shenwei shenwei 6.6M Sep  9 17:24 A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik\n-rw-r--r-- 1 shenwei shenwei 9.5M Sep  9 17:24 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik\n-rw-r--r-- 1 shenwei shenwei  46M Sep  9 17:25 concat.k23.unik\n-rw-r--r-- 1 shenwei shenwei 9.2M Sep  9 17:27 diff.k23.unik\n-rw-r--r-- 1 shenwei shenwei  11M Sep  9 17:26 dup.k23.unik\n-rw-r--r-- 1 shenwei shenwei  18M Sep  9 17:23 Ecoli-IAI39.fasta.gz.k23.sorted.unik\n-rw-r--r-- 1 shenwei shenwei  29M Sep  9 17:24 Ecoli-IAI39.fasta.gz.k23.unik\n-rw-r--r-- 1 shenwei shenwei  17M Sep  9 17:23 Ecoli-MG1655.fasta.gz.k23.sorted.unik\n-rw-r--r-- 1 shenwei shenwei  27M Sep  9 17:25 Ecoli-MG1655.fasta.gz.k23.unik\n-rw-r--r-- 1 shenwei shenwei  11M Sep  9 17:27 inter.k23.unik\n-rw-r--r-- 1 shenwei shenwei  26M Sep  9 17:26 union2.k23.unik\n-rw-r--r-- 1 shenwei shenwei  26M Sep  9 17:25 union.k23.unik\n\n$ unikmer stats *.unik -a -j 10\nfile                                              k  canonical  hashed  scaled  include-taxid  global-taxid  sorted  compact  gzipped  version     number  description\nA.muciniphila-ATCC_BAA-835.fasta.gz.m.unik       23  \u2713          \u2713       \u2715       \u2715                            \u2715       \u2715        \u2713        v5.0       860,900             \nA.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik  23  \u2713          \u2715       \u2715       \u2715                    349741  \u2713       \u2715        \u2713        v5.0     2,630,905             \nconcat.k23.unik                                  23  \u2713          \u2715       \u2715       \u2713                            \u2715       \u2713        \u2713        v5.0            -1             \ndiff.k23.unik                                    23  \u2713          \u2715       \u2715       \u2713                            \u2713       \u2715        \u2713        v5.0     2,326,096             \ndup.k23.unik                                     23  \u2713          \u2715       \u2715       \u2713                            \u2713       \u2715        \u2713        v5.0     2,576,170             \nEcoli-IAI39.fasta.gz.k23.sorted.unik             23  \u2713          \u2715       \u2715       \u2715                    585057  \u2713       \u2715        \u2713        v5.0     4,902,266             \nEcoli-IAI39.fasta.gz.k23.unik                    23  \u2713          \u2715       \u2715       \u2715                            \u2715       \u2713        \u2713        v5.0     4,902,266             \nEcoli-MG1655.fasta.gz.k23.sorted.unik            23  \u2713          \u2715       \u2715       \u2715                    511145  \u2713       \u2715        \u2713        v5.0     4,546,632             \nEcoli-MG1655.fasta.gz.k23.unik                   23  \u2713          \u2715       \u2715       \u2715                            \u2715       \u2713        \u2713        v5.0     4,546,632             \ninter.k23.unik                                   23  \u2713          \u2715       \u2715       \u2713                            \u2713       \u2715        \u2713        v5.0     2,576,170             \nunion2.k23.unik                                  23  \u2713          \u2715       \u2715       \u2713                            \u2713       \u2715        \u2713        v5.0     6,872,728             \nunion.k23.unik                                   23  \u2713          \u2715       \u2715       \u2713                            \u2713       \u2715        \u2713        v5.0     6,872,728\n\n# -----------------------------------------------------------------------------------------\n\n# mapping k-mers to genome\nseqkit seq Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta\ng=Ecoli-IAI39.fasta\nf=inter.k23.unik\n# mapping k-mers back to the genome and extract successive regions/subsequences\nunikmer map -g $g $f -a | more\n\n\n# using bwa\n# to fasta\nunikmer view $f -a -o $f.fa.gz\n# make index\nbwa index $g; samtools faidx $g\nncpu=12\nls $f.fa.gz \\\n    | rush -j 1 -v ref=$g -v j=$ncpu \\\n        'bwa aln -o 0 -l 17 -k 0 -t {j} {ref} {} \\\n            | bwa samse {ref} - {} \\\n            | samtools view -bS &gt; {}.bam; \\\n         samtools sort -T {}.tmp -@ {j} {}.bam -o {}.sorted.bam; \\\n         samtools index {}.sorted.bam; \\\n         samtools flagstat {}.sorted.bam &gt; {}.sorted.bam.flagstat; \\\n         /bin/rm {}.bam '\n</code></pre>"},{"location":"#support","title":"Support","text":"<p>Please open an issue to report bugs, propose new functions or ask for help.</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"download/","title":"Download","text":"<p>unikmer is implemented in Go programming language, statically-linked executable binary files are freely available.</p>"},{"location":"download/#current-version","title":"Current Version","text":""},{"location":"download/#v0200-2023-11-11","title":"v0.20.0 - 2023-11-11","text":"<ul> <li><code>unikmer</code>:<ul> <li>update help messages</li> <li>rename subcommand <code>uniqs</code> to <code>map</code>.</li> <li>do not add the extension <code>.unik</code> if the value of flag <code>-o/--out-prefix</code> already has one.</li> </ul> </li> <li><code>unikmer sort</code>:<ul> <li>fix the bug of using both <code>-d/--repeated</code> and <code>-m/--chunk-size</code>, which seems to existed for 4 years.</li> </ul> </li> <li><code>unikmer merge</code>:<ul> <li>fix the bug of missing one record when taxid information is contained.</li> </ul> </li> <li><code>unikmer num</code>:<ul> <li><code>-f/--force</code> also support sorted files.</li> </ul> </li> <li><code>unikmer map</code>:<ul> <li>fix a bug of missing some regions.</li> </ul> </li> <li><code>unikmer locate</code>:<ul> <li>fix seq ID error in output.</li> <li>deduplicate output.</li> </ul> </li> </ul>"},{"location":"download/#links","title":"Links","text":"OS Arch File, \u4e2d\u56fd\u955c\u50cf Download Count Linux 64-bit unikmer_linux_amd64.tar.gz,  \u4e2d\u56fd\u955c\u50cf Linux arm64 unikmer_linux_arm64.tar.gz,  \u4e2d\u56fd\u955c\u50cf macOS 64-bit unikmer_darwin_amd64.tar.gz,  \u4e2d\u56fd\u955c\u50cf macOS arm64 unikmer_darwin_arm64.tar.gz,  \u4e2d\u56fd\u955c\u50cf Windows 64-bit unikmer_windows_amd64.exe.tar.gz,  \u4e2d\u56fd\u955c\u50cf <p>Notes:</p> <ul> <li>please open an issue to request binaries for other platforms.</li> <li>run <code>unikmer version</code> to check update !!!</li> <li>run <code>unikmer autocompletion</code> to update shell autocompletion script !!!</li> </ul>"},{"location":"download/#installation","title":"Installation","text":""},{"location":"download/#method-1-install-using-conda","title":"Method 1: Install using conda","text":"<pre><code>conda install -c bioconda unikmer\n</code></pre>"},{"location":"download/#method-2-download-binaries","title":"Method 2: Download binaries","text":"<p>Download the compressed executable file of your operating system, and decompress it with <code>tar -zxvf *.tar.gz</code> command or other tools. And then:</p> <ul> <li> <p>For Linux-like systems</p> <ul> <li> <p>If you have root privilege, simply copy it to <code>/usr/local/bin</code>:</p> <pre><code>sudo cp unikmer /usr/local/bin/\n</code></pre> </li> <li> <p>Or copy to anywhere in the environment variable <code>PATH</code>:</p> <pre><code>mkdir -p $HOME/bin/; cp unikmer $HOME/bin/\n</code></pre> </li> </ul> </li> <li> <p>For Windows, just copy <code>unikmer.exe</code> to <code>C:\\WINDOWS\\system32</code>.</p> </li> </ul>"},{"location":"download/#method-3-compile-from-source","title":"Method 3: Compile from source","text":"<ol> <li> <p>Install go</p> <pre><code>wget https://go.dev/dl/go1.17.13.linux-amd64.tar.gz\n\ntar -zxf go1.17.13.linux-amd64.tar.gz -C $HOME/\n\n# or\n#   echo \"export PATH=$PATH:$HOME/go/bin\" &gt;&gt; ~/.bashrc\n#   source ~/.bashrc\nexport PATH=$PATH:$HOME/go/bin\n</code></pre> </li> <li> <p>Compile KMCP</p> <pre><code># ------------- the latest stable version -------------\n\ngo get -v -u github.com/shenwei356/unikmer/unikmer\n\n# The executable binary file is located in:\n#   ~/go/bin/unikmer\n# You can also move it to anywhere in the $PATH\nmkdir -p $HOME/bin\ncp ~/go/bin/unikmer $HOME/bin/\n\n# --------------- the development version --------------\n\ngit clone https://github.com/shenwei356/unikmer\ncd unikmer/unikmer/\ngo build\n\n# The executable binary file is located in:\n#   ./unikmer\n# You can also move it to anywhere in the $PATH\nmkdir -p $HOME/bin\ncp ./unikmer $HOME/bin/\n</code></pre> </li> </ol>"},{"location":"download/#shell-completion","title":"Shell-completion","text":"<p>Supported shell: bash|zsh|fish|powershell</p> <p>Bash:</p> <pre><code># generate completion shell\nunikmer autocompletion --shell bash\n\n# configure if never did.\n# install bash-completion if the \"complete\" command is not found.\necho \"for bcfile in ~/.bash_completion.d/* ; do source \\$bcfile; done\" &gt;&gt; ~/.bash_completion\necho \"source ~/.bash_completion\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Zsh:</p> <pre><code># generate completion shell\nunikmer autocompletion --shell zsh --file ~/.zfunc/_unikmer\n\n# configure if never did\necho 'fpath=( ~/.zfunc \"${fpath[@]}\" )' &gt;&gt; ~/.zshrc\necho \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>fish:</p> <pre><code>unikmer autocompletion --shell fish --file ~/.config/fish/completions/unikmer.fish\n</code></pre>"},{"location":"download/#release-history","title":"Release History","text":""},{"location":"download/#v0191-2022-12-26","title":"v0.19.1 - 2022-12-26","text":"<ul> <li><code>unikmer</code>: When environment variable <code>UNIKMER_DB</code> is set, explicitly setting <code>--data-dir</code> will overide the value of <code>UNIKMER_DB</code>.</li> <li><code>unikmer uniqs</code>: skip sequences shorter than K.</li> <li><code>unikmer count/encode</code>: limit the maximum k-mer size to 64.</li> </ul>"},{"location":"download/#v0190-2022-04-25","title":"v0.19.0 - 2022-04-25","text":"<ul> <li>rename command <code>genautocomplete</code> to <code>autocompletion</code>.</li> <li>remove command <code>help</code>.</li> <li>change default value of option <code>-j</code> from <code>2</code> to <code>4</code>.</li> <li><code>unikmer count/uniqs/locate</code>: new flag <code>-B/--seq-name-filter</code> for filtering out unwanted sequences like plasmids.</li> <li><code>unikmer count</code>: add support of <code>.xz</code> and <code>.zst</code> files.</li> </ul>"},{"location":"download/#v0188-2021-09-17","title":"v0.18.8 - 2021-09-17","text":"<ul> <li>use new version of nthash with better performance.</li> <li><code>unikmer info</code>: fix typoes.</li> </ul>"},{"location":"download/#v0187-2021-08-30","title":"v0.18.7 - 2021-08-30","text":"<ul> <li><code>unikmer</code>: better counting speed by upstream optimization of FASTA/Q parsing.</li> <li><code>unikmer concat</code>: fix parsing flag <code>-n</code>.</li> </ul>"},{"location":"download/#v0173-2021-05-16","title":"v0.17.3 - 2021-05-16","text":"<ul> <li><code>unikmer</code>: fix buiding for 386. #21</li> </ul>"},{"location":"download/#v0172-2021-02-05","title":"v0.17.2 - 2021-02-05","text":"<ul> <li><code>unikmer</code>: slightly speedup for computing LCA.</li> <li><code>unikmer rfilter:</code> <ul> <li>flag <code>-E/--equal-to</code> supports multiple values.</li> <li>new flag <code>-n/--save-predictable-norank</code>: do not discard some special ranks without order when using -L, where rank of the closest higher node is still lower than rank cutoff.</li> </ul> </li> </ul>"},{"location":"download/#v0171-2021-01-18","title":"v0.17.1 - 2021-01-18","text":"<ul> <li><code>unikmer rfilter:</code> change handling of black list.</li> </ul>"},{"location":"download/#v0170-2021-01-15","title":"v0.17.0 - 2021-01-15","text":"<ul> <li>syncmer value changed with different hash method.</li> <li><code>unikmer count</code>: syncmer value changed.</li> </ul>"},{"location":"download/#v0161-2020-12-28","title":"v0.16.1 - 2020-12-28","text":"<ul> <li>change Header.Number from <code>int64</code> to <code>uint64</code></li> <li><code>unikmer info</code>: fix recounting problem for unsorted kmers but with Number.</li> </ul>"},{"location":"download/#v0160-2020-12-28","title":"v0.16.0 - 2020-12-28","text":"<ul> <li><code>unikmer</code>:<ul> <li>binary file format change: fix reading long description, and bump version to <code>5.0</code>.</li> <li>better binary file parsing performance.</li> </ul> </li> </ul>"},{"location":"download/#v0150-2020-12-25","title":"v0.15.0 - 2020-12-25","text":"<ul> <li><code>unikmer</code>:<ul> <li>binary file minor change: increase description maximal length from 128 B to 1KB.</li> <li>separating k-mers (sketches) indexing and searching from <code>unikmer</code>, including <code>unikmer db info/index/search</code>.</li> </ul> </li> <li><code>unikmer count</code>: fix syncmer.</li> <li><code>unikmer dump</code>: new flag <code>--hashed</code>.</li> <li>rename <code>unikmer stats</code> to <code>unikmer info</code>, and add new column <code>description</code>.</li> </ul>"},{"location":"download/#v0140-2020-11-25","title":"v0.14.0 - 2020-11-25","text":"<ul> <li><code>unikmer union</code>: fix bug when flag <code>-s</code> not given.</li> <li><code>unikmer count/uniqs/locate</code>: performance improvement on generating k-mers.</li> <li><code>unikmer count/db</code>: support scaled/minizimer/syncmer sketch.</li> <li><code>unikmer stats</code>: change format.</li> </ul>"},{"location":"download/#v0130-2020-10-23","title":"v0.13.0 - 2020-10-23","text":"<ul> <li>new command <code>unikmer common</code>: Finding k-mers shared by most of multiple binary files.</li> <li><code>unikmer common/count/diff/grep/rfilter/sort/split/union</code>: faster sorting.</li> <li><code>unikmer uniqs</code>: better result for flag <code>--circular</code>.</li> <li><code>unikmer search</code>: fix a bug when searching on database with more than one hash.</li> </ul>"},{"location":"download/#v0120-2020-09-24","title":"v0.12.0 - 2020-09-24","text":"<ul> <li><code>unikmer</code>:<ul> <li>support longer k (k&gt;32) by saving ntHash.</li> <li>new flag <code>-nocheck-file</code> for not checking binary file.</li> </ul> </li> <li>new commands:<ul> <li><code>unikmer db index</code>: constructing index from binary files</li> <li><code>unikmer db info</code>: printing information of index file</li> <li><code>unikmer db search</code>: searching sequence from index database</li> </ul> </li> <li><code>unikmer rfilter</code>: change format of rank order file.</li> <li><code>unikmer inter/union</code>: speedup for single input file.</li> <li><code>unikmer concat</code>:<ul> <li>new flag <code>-t/--taxid</code> for assigning global taxid, this can slightly reduce file size.</li> <li>new flag <code>-n/--number</code> for setting number of k-mers.</li> </ul> </li> <li><code>unikmer num</code>:<ul> <li>new flag <code>-f/--force</code> for counting k-mers.</li> </ul> </li> <li><code>unikmer locate</code>: output in BED6.</li> <li><code>unikmer locate/uniqs</code>: support multiple genome files.</li> <li><code>unikmer uniqs</code>:<ul> <li>stricter multiple mapping limit.</li> <li>new flag <code>-W/--seqs-in-a-file-as-one-genome</code>.</li> </ul> </li> <li><code>unikmer count</code>:<ul> <li>new flag <code>-u/--unique</code> for output unique (single copy) kmers</li> </ul> </li> </ul>"},{"location":"download/#v0110-2020-07-06","title":"v0.11.0 - 2020-07-06","text":"<ul> <li>new command: <code>unikmer rfilter</code> for filtering k-mers by taxonomic rank.</li> <li><code>unikmer inter</code>: new flag <code>-m/--mix-taxid</code> allowing part of files being whithout taxids.</li> <li><code>unikmer dump</code>: fix a nil pointer bug.</li> <li><code>unikmer count</code>:<ul> <li>fix checking taxid in sequence header.</li> <li>fix setting global taxid.</li> </ul> </li> <li><code>unikmer count/diff/union</code>: slightly reduce memory and speedup when sorting k-mers.</li> <li><code>unikmer filter</code>: change scoring.</li> <li><code>unikmer count/locate/uniqs</code>: remove flag <code>--circular</code>.</li> </ul>"},{"location":"download/#v0100-2020-05-21","title":"v0.10.0 - 2020-05-21","text":"<ul> <li><code>unikmer</code>: fix loading custom taxonomy files.</li> <li><code>unikmer count</code>:<ul> <li>new flag <code>-d</code> for only count duplicate k-mers, for removing singleton in FASTQ.</li> <li>fix nil pointer bug of <code>-t</code>.</li> </ul> </li> <li><code>unikmer split</code>: fix memery and last odd k-mer mising bug for given ONE sorted input file.</li> <li><code>unikmer sort</code>: skip loading taxonomy data when neither <code>-u</code> or <code>-d</code> given.</li> <li><code>unikmer diff</code>: 2X speedup, and requiring 1th file being sorted.</li> <li><code>unikmer inter</code>: 2-5X speedup, and requiring all files being sorted, sorted output by default.</li> </ul>"},{"location":"download/#v090-2020-02-18","title":"v0.9.0 - 2020-02-18","text":"<ul> <li><code>unikmer</code>: new binary format supporting optional Taxids.</li> <li>deleted command: <code>unikmer subset</code>.</li> <li>new command: <code>unikmer head</code> for extracting the first N k-mers.</li> <li>new command: <code>unikmer tsplit</code> for splitting k-mers according to taxid.</li> <li><code>unikmer grep</code>: support searching with taxids.</li> <li><code>unikmer count</code>: support parsing taxid from FASTA/Q header.</li> </ul>"},{"location":"download/#v080-2019-02-09","title":"v0.8.0 - 2019-02-09","text":"<ul> <li><code>unikmer</code>:<ul> <li>new option <code>-i/--infile-list</code>, if given, files in the list file are appended to files from cli arguments.</li> <li>improve performance of binary file reading and writing.</li> </ul> </li> <li><code>unikmer sort/split/merge</code>: safer forcing deletion of existed outdir, and better log.</li> <li><code>unikmer split</code>: performance improvement for single sorted input file.</li> <li><code>unikmer sort</code>: performance improvement for using <code>-m/--chunk-size</code>.</li> <li><code>unikmer grep</code>: rewrite, support loading queries from .unik files.</li> <li><code>unikmer dump</code>: fix number information in output file.</li> <li><code>unikmer concat</code>: new flag <code>-s/--sorted</code>.</li> </ul>"},{"location":"download/#v070-2019-09-29","title":"v0.7.0 - 2019-09-29","text":"<ul> <li>new command <code>unikmer filter</code>: filter low-complexity k-mers.</li> <li>new command <code>unikmer split</code>: split k-mers into sorted chunk files.</li> <li>new command <code>unikmer merge</code>: merge from sorted chunk files.</li> <li><code>unikmer view</code>:<ul> <li>new option <code>-N/--show-code-only</code> for only showing encoded integers.</li> <li>fix output error for <code>-q/--fastq</code>.</li> </ul> </li> <li><code>unikmer uniqs</code>:<ul> <li>new option <code>-x/--max-cont-non-uniq-kmers</code> for limiting max continuous non-unique k-mers.</li> <li>new option <code>-X/--max-num-cont-non-uniq-kmers</code> for limiting max number of continuous non-unique k-mers.</li> <li>fix bug for <code>-m/--min-len</code>.</li> </ul> </li> <li><code>unikmer union</code>:<ul> <li>new option <code>-d/--repeated</code> for only printing duplicate k-mers.</li> </ul> </li> <li><code>unikmer sort</code>:<ul> <li>new option <code>-u/--unique</code> for removing duplicate k-mers.</li> <li>new option <code>-d/--repeated</code> for only printing duplicate k-mers.</li> <li>new option <code>-m/--chunk-size</code> for limiting maximum memory for sorting.</li> </ul> </li> <li><code>unikmer diff</code>:<ul> <li>small speed improvements.</li> </ul> </li> </ul>"},{"location":"download/#v062-2019-01-21","title":"v0.6.2 - 2019-01-21","text":"<ul> <li><code>unikmer encode</code>: better output for bits presentation of encoded k-mers (<code>-a/--all</code>)</li> </ul>"},{"location":"download/#v061-2019-01-21","title":"v0.6.1 - 2019-01-21","text":"<ul> <li><code>unikmer dump</code>: <ul> <li>new option <code>-K/--canonical</code> to keep the canonical k-mers.</li> <li>new option <code>-k/--canonical-only</code> to only keep the canonical k-mers.</li> <li>new option <code>-s/--sorted</code> to save sorted k-mers.</li> </ul> </li> <li><code>unikmer encode</code>: add option <code>-K/--canonical</code> to keep the canonical k-mers.</li> </ul>"},{"location":"download/#v060-2019-01-20","title":"v0.6.0 - 2019-01-20","text":"<ul> <li><code>unikmer</code>: check encoded integer overflow</li> <li>new command <code>unikmer encode</code>: encode plain k-mer text to integer</li> <li>new command <code>unikmer decode</code>: decode encoded integer to k-mer text</li> </ul>"},{"location":"download/#v053-2018-11-28","title":"v0.5.3 - 2018-11-28","text":"<ul> <li><code>unikmer count/dump</code>: check file before handling them.</li> </ul>"},{"location":"download/#v052-2018-11-28","title":"v0.5.2 - 2018-11-28","text":"<ul> <li><code>unikmer locate</code>: fix bug.</li> <li><code>unikmer</code>: doc update.</li> </ul>"},{"location":"download/#v051-2018-11-07","title":"v0.5.1 - 2018-11-07","text":"<ul> <li><code>unikmer locate/uniqs</code>: fix options checking.</li> </ul>"},{"location":"download/#v050-2018-11-07","title":"v0.5.0 - 2018-11-07","text":"<ul> <li><code>unikmer diff</code>: fix concurrency bug when cloning kmers from first file.</li> <li>new command <code>unikmer locate</code>: locate Kmers in genome.</li> <li>new command <code>unikmer uniqs</code>: mapping Kmers back to genome and find unique subsequences.</li> </ul>"},{"location":"download/#v044-2018-10-27","title":"v0.4.4 - 2018-10-27","text":"<ul> <li><code>unikmer</code>: add global option <code>-L/--compression-level</code>.</li> <li><code>unikmer diff</code>: reduce memory occupation, speed not affected.</li> </ul>"},{"location":"download/#v043-2018-10-13","title":"v0.4.3 - 2018-10-13","text":"<ul> <li><code>unikmer diff</code>: fix bug of hanging when the first file having no Kmers.</li> </ul>"},{"location":"download/#v042-2018-10-13","title":"v0.4.2 - 2018-10-13","text":"<ul> <li><code>unikmer stats/diff</code>: more intuitional output</li> </ul>"},{"location":"download/#v041-2018-10-10","title":"v0.4.1 - 2018-10-10","text":"<ul> <li>Better performance of writing and reading binary files </li> </ul>"},{"location":"download/#v040-2018-10-09","title":"v0.4.0 - 2018-10-09","text":"<ul> <li>Binary serialization format changed.</li> <li>new command <code>unikmer sort</code>: sort binary files</li> <li><code>unikmer count/diff/union/inter</code>: better performance, add option to sort Kmers which significantly reduces file size</li> <li><code>unikmer dump</code>: changed option</li> <li><code>unikmer count</code>: changed option</li> </ul>"},{"location":"download/#v031-2018-09-25","title":"v0.3.1 - 2018-09-25","text":"<ul> <li>Binary serialization format changed.</li> <li>new command <code>unikmer stats</code>: statistics of binary files.</li> <li><code>unikmer</code>: adding global option <code>-i/--infile-list</code> for reading files listed in file.</li> <li><code>unikmer diff</code>: fixed a concurrency bug when no diff found.</li> </ul>"},{"location":"download/#v021-2018-09-23","title":"v0.2.1 - 2018-09-23","text":"<ul> <li><code>unikmer count</code>: performance improvement and new option <code>--canonical</code> for only keeping canonical Kmers.</li> </ul>"},{"location":"download/#v020-2018-09-09","title":"v0.2.0 - 2018-09-09","text":"<ul> <li>new command <code>unikmer sample</code>: sample Kmers from binary files.</li> <li>new global options:</li> <li><code>-c, --compact</code>:     write more compact binary file with little loss of speed.</li> <li><code>-C, --no-compress</code>:   do not compress binary file (not recommended).</li> <li>some improvements.</li> </ul>"},{"location":"download/#v010-2018-08-09","title":"v0.1.0 - 2018-08-09","text":"<ul> <li>first release</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#summary","title":"summary","text":"Category Command Function Input In.sorted In.flag-consistency Output Out.sorted Out.unique Counting count Generate k-mers (sketch) from FASTA/Q sequences fastx / / .unik optional optional Information info Information of binary files .unik optional no need tsv / / num Quickly inspect the number of k-mers in binary files .unik optional no need tsv / / Format conversion view Read and output binary format to plain text .unik optional required tsv / / dump Convert plain k-mer text to binary format tsv optional / .unik optional follow input encode Encode plain k-mer texts to integers tsv / / tsv / / decode Decode encoded integers to k-mer texts tsv / / tsv / / Set operations concat Concatenate multiple binary files without removing duplicates .unik optional required .unik optional no inter Intersection of k-mers in multiple binary files .unik required required .unik yes yes common Find k-mers shared by most of the binary files .unik required required .unik yes yes union Union of k-mers in multiple binary files .unik optional required .unik optional yes diff Set difference of k-mers in multiple binary files .unik 1th file required required .unik optional yes Split and merge sort Sort k-mers to reduce the file size and accelerate downstream analysis .unik optional required .unik yes optional split Split k-mers into sorted chunk files .unik optional required .unik yes optional tsplit Split k-mers according to TaxId .unik required required .unik yes yes merge Merge k-mers from sorted chunk files .unik required required .unik yes optional Subset head Extract the first N k-mers .unik optional required .unik follow input follow input sample Sample k-mers from binary files .unik optional required .unik follow input follow input grep Search k-mers from binary files .unik optional required .unik follow input optional filter Filter out low-complexity k-mers .unik optional required .unik follow input follow input rfilter Filter k-mers by taxonomic rank .unik optional required .unik follow input follow input Searching on genomes locate Locate k-mers in genome .unik, fasta optional required tsv / / map Mapping k-mers back to the genome and extract successive regions/subsequences .unik, fasta optional required bed/fasta / /"},{"location":"usage/#unikmer","title":"unikmer","text":"<pre><code>unikmer - a versatile toolkit for k-mers with taxonomic information\n\nunikmer is a toolkit for nucleic acid k-mer analysis, providing functions\nincluding set operation on k-mers optional with TaxIds but without count\ninformation.\n\nK-mers are either encoded (k&lt;=32) or hashed (k&lt;=64) into 'uint64',\nand serialized in binary file with the extension '.unik'.\n\nTaxIds can be assigned when counting k-mers from genome sequences,\nand LCA (Lowest Common Ancestor) is computed during set opertions\nincluding computing union, intersection, set difference, unique and\nrepeated k-mers.\n\nVersion: v0.20.0\n\nAuthor: Wei Shen &lt;shenwei356@gmail.com&gt;\n\nDocuments  : https://bioinf.shenwei.me/unikmer\nSource code: https://github.com/shenwei356/unikmer\n\nDataset (optional):\n\n  Manipulating k-mers with TaxIds needs taxonomy file from e.g., \n  NCBI Taxonomy database, please extract \"nodes.dmp\", \"names.dmp\",\n  \"delnodes.dmp\" and \"merged.dmp\" from link below into ~/.unikmer/ ,\n  ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz , \n  or some other directory, and later you can refer to using flag\n  --data-dir or environment variable UNIKMER_DB.\n\n  For GTDB, use 'taxonkit create-taxdump' to create NCBI-style\n  taxonomy dump files, or download from:\n    https://github.com/shenwei356/gtdb-taxonomy\n\n  Note that TaxIds are represented using uint32 and stored in 4 or\n  less bytes, all TaxIds should be in the range of [1, 4294967295].\n\nUsage:\n  unikmer [command] \n\nAvailable Commands:\n  autocompletion Generate shell autocompletion script (bash|zsh|fish|powershell)\n  common         Find k-mers shared by most of the binary files\n  concat         Concatenate multiple binary files without removing duplicates\n  count          Generate k-mers (sketch) from FASTA/Q sequences\n  decode         Decode encoded integer to k-mer text\n  diff           Set difference of k-mers in multiple binary files\n  dump           Convert plain k-mer text to binary format\n  encode         Encode plain k-mer texts to integers\n  filter         Filter out low-complexity k-mers (experimental)\n  grep           Search k-mers from binary files\n  head           Extract the first N k-mers\n  info           Information of binary files\n  inter          Intersection of k-mers in multiple binary files\n  locate         Locate k-mers in genome\n  map            Mapping k-mers back to the genome and extract successive regions/subsequences\n  merge          Merge k-mers from sorted chunk files\n  num            Quickly inspect the number of k-mers in binary files\n  rfilter        Filter k-mers by taxonomic rank\n  sample         Sample k-mers from binary files\n  sort           Sort k-mers to reduce the file size and accelerate downstream analysis\n  split          Split k-mers into sorted chunk files\n  tsplit         Split k-mers according to taxid\n  union          Union of k-mers in multiple binary files\n  version        Print version information and check for update\n  view           Read and output binary format to plain text\n\nFlags:\n  -c, --compact                 write compact binary file with little loss of speed\n      --compression-level int   compression level (default -1)\n      --data-dir string         directory containing NCBI Taxonomy files, including nodes.dmp,\n                                names.dmp, merged.dmp and delnodes.dmp (default \"/home/shenwei/.unikmer\")\n  -h, --help                    help for unikmer\n  -I, --ignore-taxid            ignore taxonomy information\n  -i, --infile-list string      file of input files list (one file per line), if given, they are\n                                appended to files from cli arguments\n      --max-taxid uint32        for smaller TaxIds, we can use less space to store TaxIds. default value\n                                is 1&lt;&lt;32-1, that's enough for NCBI Taxonomy TaxIds (default 4294967295)\n  -C, --no-compress             do not compress binary file (not recommended)\n      --nocheck-file            do not check binary file, when using process substitution or named pipe\n  -j, --threads int             number of CPUs to use (default 4)\n      --verbose                 print verbose information\n\nUse \"unikmer [command] --help\" for more information about a command.\n\n</code></pre>"},{"location":"usage/#count","title":"count","text":"<pre><code>Generate k-mers (sketch) from FASTA/Q sequences\n\nK-mer:\n  1. K-mer code (k&lt;=32)\n  2. Hashed k-mer (ntHash, k&lt;=64)\n\nK-mer sketches:\n  1. Scaled MinHash\n  2. Minimizer\n  3. Closed Syncmer\n\nUsage:\n  unikmer count [flags] -K -k &lt;k&gt; -u -s [-t &lt;taxid&gt;] &lt;seq files&gt; -o &lt;out prefix&gt;\n\nFlags:\n  -K, --canonical                   only keep the canonical k-mers\n      --circular                    circular genome\n  -H, --hash                        save hash of k-mer, automatically on for k&gt;32. This flag overides\n                                    global flag -c/--compact\n  -h, --help                        help for count\n  -k, --kmer-len int                k-mer length\n  -l, --linear                      output k-mers in linear order, duplicate k-mers are not removed\n  -W, --minimizer-w int             minimizer window size\n  -V, --more-verbose                print extra verbose information\n  -o, --out-prefix string           out file prefix (\"-\" for stdout) (default \"-\")\n  -T, --parse-taxid                 parse taxid from FASTA/Q header\n  -r, --parse-taxid-regexp string   regular expression for passing taxid\n  -d, --repeated                    only count duplicate k-mers, for removing singleton in FASTQ\n  -D, --scale int                   scale/down-sample factor (default 1)\n  -B, --seq-name-filter strings     list of regular expressions for filtering out sequences by\n                                    header/name, case ignored.\n  -s, --sort                        sort k-mers, this significantly reduce file size for k&lt;=25. This\n                                    flag overides global flag -c/--compact\n  -S, --syncmer-s int               closed syncmer length\n  -t, --taxid uint32                global taxid\n  -u, --unique                      only count unique k-mers, which are not duplicate\n\n</code></pre>"},{"location":"usage/#info","title":"info","text":"<pre><code>Information of binary files\n\nTips:\n  1. For lots of small files (especially on SDD), use big value of '-j' to\n     parallelize counting.\n\nUsage:\n  unikmer info [flags] \n\nAliases:\n  info, stats\n\nFlags:\n  -a, --all                   all information, including number of k-mers\n  -b, --basename              only output basename of files\n  -h, --help                  help for info\n  -o, --out-file string       out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n  -e, --skip-err              skip error, only show warning message\n      --symbol-false string   smybol for false (default \"\u2715\")\n      --symbol-true string    smybol for true (default \"\u2713\")\n  -T, --tabular               output in machine-friendly tabular format\n\n</code></pre>"},{"location":"usage/#num","title":"num","text":"<pre><code>Quickly inspect the number of k-mers in binary files\n\nAttention:\n  1. This command is designed to quickly inspect the number of k-mers in binary file,\n  2. For non-sorted file, it returns '-1' unless switching on flag '-f/--force'.\n\nUsage:\n  unikmer num [flags] \n\nFlags:\n  -b, --basename          only output basename of files\n  -n, --file-name         show file name\n  -f, --force             read the whole file and count k-mers\n  -h, --help              help for num\n  -o, --out-file string   out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n\n</code></pre>"},{"location":"usage/#view","title":"view","text":"<pre><code>Read and output binary format to plain text\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nUsage:\n  unikmer view [flags] \n\nFlags:\n  -a, --fasta             output in FASTA format, with encoded integer as FASTA header\n  -q, --fastq             output in FASTQ format, with encoded integer as FASTQ header\n  -g, --genome strings    genomes in (gzipped) fasta file(s) for decoding hashed k-mers\n  -h, --help              help for view\n  -o, --out-file string   out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n  -n, --show-code         show encoded integer along with k-mer\n  -N, --show-code-only    only show encoded integers, faster than cutting from result of -n/--show-cde\n  -t, --show-taxid        show taxid\n  -T, --show-taxid-only   show taxid only\n\n</code></pre>"},{"location":"usage/#dump","title":"dump","text":"<pre><code>Convert plain k-mer text to binary format\n\nAttentions:\n  1. Input should be one k-mer per line, or tab-delimited two columns\n     with a k-mer and it's taxid.\n  2. You can also assign a global taxid with flag -t/--taxid.\n\nUsage:\n  unikmer dump [flags] \n\nFlags:\n  -K, --canonical           save the canonical k-mers\n  -O, --canonical-only      only save the canonical k-mers. This flag overides -K/--canonical\n  -H, --hash                save hash of k-mer, automatically on for k&gt;32. This flag overides global\n                            flag -c/--compact\n      --hashed              giving hash values of k-mers, This flag overides global flag -c/--compact\n  -h, --help                help for dump\n  -k, --kmer-len int        k-mer length\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -s, --sorted              input k-mers are sorted\n  -t, --taxid uint32        global taxid\n  -u, --unique              remove duplicate k-mers\n\n</code></pre>"},{"location":"usage/#encode","title":"encode","text":"<pre><code>Encode plain k-mer texts to integers\n\nUsage:\n  unikmer encode [flags] \n\nFlags:\n  -a, --all               output all data: orginial k-mer, parsed k-mer, encoded integer, encode bits\n  -K, --canonical         keep the canonical k-mers\n  -H, --hash              save hash of k-mer, automatically on for k&gt;32\n  -h, --help              help for encode\n  -o, --out-file string   out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n\n</code></pre>"},{"location":"usage/#decode","title":"decode","text":"<pre><code>Decode encoded integers to k-mer texts\n\nUsage:\n  unikmer decode [flags] \n\nFlags:\n  -a, --all               output all data: encoded integer, decoded k-mer\n  -h, --help              help for decode\n  -k, --kmer-len int      k-mer length\n  -o, --out-file string   out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")\n\n</code></pre>"},{"location":"usage/#concat","title":"concat","text":"<pre><code>Concatenate multiple binary files without removing duplicates\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nUsage:\n  unikmer concat [flags] \n\nFlags:\n  -h, --help                help for concat\n  -n, --number int          number of k-mers (default -1)\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -s, --sorted              input k-mers are sorted\n  -t, --taxid uint32        global taxid\n\n</code></pre>"},{"location":"usage/#inter","title":"inter","text":"<pre><code>Intersection of k-mers in multiple binary files\n\nAttentions:\n  0. All input files should be sorted, and output file is sorted.\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Taxid information could be inconsistent when using flag --mix-taxid.\n\nTips:\n  1. For comparing TWO files with really huge number of k-mers,\n     you can use 'unikmer sort -u -m 100M' for each file,\n     and then 'unikmer merge -' from them.\n  2. Put the smallest file in the beginning to reduce memory usage.\n\nUsage:\n  unikmer inter [flags] \n\nFlags:\n  -h, --help                help for inter\n  -m, --mix-taxid           allow part of files being whithout taxids\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n\n</code></pre>"},{"location":"usage/#common","title":"common","text":"<pre><code>Find k-mers shared by most of the binary files\n\nThis command is similar to \"unikmer inter\" but with looser restriction,\nk-mers shared by some number/proportion of multiple files are outputted.\n\nAttentions:\n  0. All input files should be sorted, and output file is sorted.\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Taxid information could be inconsistent when using flag --mix-taxid.\n  3. At most 65535 input files allowed.\n\nTips:\n  1. For comparing TWO files with really huge number of k-mers,\n     you can use 'unikmer sort -u -m 100M' for each file,\n     and then 'unikmer merge -' from them.\n  2. Put the smallest file in the beginning to reduce memory usage.\n\nUsage:\n  unikmer common [flags] \n\nFlags:\n  -h, --help                help for common\n  -m, --mix-taxid           allow part of files being whithout taxids\n  -n, --number int          minimum number of files that share a k-mer (overides -p/--proportion)\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -p, --proportion float    minimum proportion of files that share a k-mer (default 1)\n</code></pre>"},{"location":"usage/#union","title":"union","text":"<pre><code>Union of k-mers in multiple binary files\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nTips:\n  1. 'unikmer sort -u' is slightly faster in cost of more memory usage.\n  2. For really huge number of k-mers, you can use 'unikmer sort -m 100M -u'.\n  3. For large number of sorted .unik files, you can use 'unikmer merge'.\n\nUsage:\n  unikmer union [flags] \n\nFlags:\n  -h, --help                help for union\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -s, --sort                sort k-mers, this significantly reduce file size for k&lt;=25. This flag\n                            overides global flag -c/--compact\n</code></pre>"},{"location":"usage/#diff","title":"diff","text":"<pre><code>Set difference of k-mers in multiple binary files\n\nAttentions:\n  0. The first file should be sorted.\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. By default taxids in the 2nd and later files are ignored.\n  3. You can switch on flag -t/--compare-taxid, and input\n     files should ALL have or don't have taxid information.\n     A same k-mer found but query taxid equals to target taxid,\n     or query taxid is ancester of target taxid, this k-mer remains.\n\nTips:\n  1. Increasing threads number (-j/--threads) to accelerate computation\n     when dealing with lots of files, in cost of more memory occupation.\n\nUsage:\n  unikmer diff [flags] \n\nFlags:\n  -t, --compare-taxid       take taxid into consideration. type unikmer \"diff -h\" for detail\n  -h, --help                help for diff\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -s, --sort                sort k-mers, this significantly reduce file size for k&lt;=25. This flag\n                            overides global flag -c/--compact\n\n</code></pre>"},{"location":"usage/#sort","title":"sort","text":"<pre><code>Sort k-mers in binary files to reduce file size\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nNotes:\n  1. When sorting from large number of files, this command is equivalent to\n     'unikmer split' + 'unikmer merge'.\n\nTips:\n  1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size\n     depends on k-mers and file save mode (sorted/compact/normal).\n  2. Increasing value of -j/--threads can accelerates splitting stage,\n     in cost of more memory occupation.\n  3. For sorted input files, the memory usage is very low and speed is fast.\n\nUsage:\n  unikmer sort [flags] \n\nFlags:\n  -m, --chunk-size string    split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer\n                             sort -h\" for detail\n      --force                overwrite tmp dir\n  -h, --help                 help for sort\n  -k, --keep-tmp-dir         keep tmp dir\n  -M, --max-open-files int   max number of open files (default 400)\n  -o, --out-prefix string    out file prefix (\"-\" for stdout) (default \"-\")\n  -d, --repeated             only print duplicate k-mers\n  -t, --tmp-dir string       directory for intermediate files (default \"./\")\n  -u, --unique               remove duplicate k-mers\n\n</code></pre>"},{"location":"usage/#split","title":"split","text":"<pre><code>Split k-mers into sorted chunk files\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nTips:\n  1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size\n     depends on k-mers and file save mode (sorted/compact/normal).\n  2. Increasing value of -j/--threads can accelerates splitting stage,\n     in cost of more memory occupation.\n  3. For sorted input files, the memory usage is very low and speed is fast.\n\nUsage:\n  unikmer split [flags] \n\nFlags:\n  -m, --chunk-size string   split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer\n                            sort -h\" for detail\n      --force               overwrite output directory\n  -h, --help                help for split\n  -O, --out-dir string      output directory\n  -d, --repeated            split for further printing duplicate k-mers\n  -u, --unique              split for further removing duplicate k-mers\n\n</code></pre>"},{"location":"usage/#tsplit","title":"tsplit","text":"<pre><code>Split k-mers according to taxid\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have taxid information.\n  3. Input files should be sorted using 'unikmer sort'.\n  4. All k-mers will loaded into RAM, for big input files,\n     you can 'split' them first, 'tsplit' and then 'concat'\n     for every taxid.\n\nTips:\n  1. Increasing value of -j/--threads can accelerates splitting stage,\n     in cost of more memory occupation.\n\nUsage:\n  unikmer tsplit [flags] \n\nFlags:\n      --force               overwrite output directory\n  -h, --help                help for tsplit\n  -O, --out-dir string      output directory\n  -o, --out-prefix string   out file prefix (default \"tsplit\")\n\n</code></pre>"},{"location":"usage/#merge","title":"merge","text":"<pre><code>Merge k-mers from sorted chunk files\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n  3. Input files should be sorted.\n\nTips:\n  1. If you don't need to compute unique or repeated k-mers, \n     use 'unikmer concat -s', which is faster.\n\nUsage:\n  unikmer merge [flags] \n\nFlags:\n      --force                overwrite tmp dir\n  -h, --help                 help for merge\n  -D, --is-dir               intput files are directory containing chunk files\n  -k, --keep-tmp-dir         keep tmp dir\n  -M, --max-open-files int   max number of open files (default 400)\n  -o, --out-prefix string    out file prefix (\"-\" for stdout) (default \"-\")\n  -p, --pattern string       chunk file pattern (regular expression) (default \"^chunk_\\\\d+\\\\.unik$\")\n  -d, --repeated             only print duplicate k-mers\n  -t, --tmp-dir string       directory for intermediate files (default \"./\")\n  -u, --unique               remove duplicate k-mers\n\n</code></pre>"},{"location":"usage/#head","title":"head","text":"<pre><code>Extract the first N k-mers\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nUsage:\n  unikmer head [flags] \n\nFlags:\n  -h, --help                help for head\n  -n, --number int          number of k-mers to extract (default 10)\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n\n</code></pre>"},{"location":"usage/#sample","title":"sample","text":"<pre><code>Sample k-mers from binary files.\n\nThe Sampling type is fixed sampling.\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Input files should ALL have or don't have taxid information.\n\nUsage:\n  unikmer sample [flags] \n\nFlags:\n  -h, --help                help for sample\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -s, --start int           start location (default 1)\n  -w, --window int          window size (default 1)\n\n</code></pre>"},{"location":"usage/#grep","title":"grep","text":"<pre><code>Search k-mers from binary files\n\nAttentions:\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Canonical k-mers are used and outputted.\n  3. Input files should ALL have or don't have taxid information.\n\nTips:\n  1. Increase value of '-j' for better performance when dealing with\n     lots of files, especially on SDD.\n  2. For searching using binary .unik file, use 'unikmer inter --mix-taxid',\n     which is faster than 'unikmer grep' in single-thread mode.\n\nUsage:\n  unikmer grep [flags] \n\nFlags:\n  -D, --degenerate                query k-mers contains degenerate base\n      --force                     overwrite output directory\n  -h, --help                      help for grep\n  -v, --invert-match              invert the sense of matching, to select non-matching records\n  -m, --multiple-outfiles         write results into separated files for multiple input files\n  -O, --out-dir string            output directory (default \"unikmer-grep\")\n  -o, --out-prefix string         out file prefix (\"-\" for stdout) (default \"-\")\n  -S, --out-suffix string         output suffix (default \".grep\")\n  -q, --query strings             query k-mers/taxids (multiple values delimted by comma supported)\n  -f, --query-file strings        query file (one k-mer/taxid per line)\n  -t, --query-is-taxid            queries are taxids\n  -F, --query-unik-file strings   query file in .unik format\n  -d, --repeated                  only print duplicate k-mers\n  -s, --sort                      sort k-mers, this significantly reduce file size for k&lt;=25. This flag\n                                  overides global flag -c/--compact\n  -u, --unique                    remove duplicate k-mers\n</code></pre>"},{"location":"usage/#filter","title":"filter","text":"<pre><code>Filter out low-complexity k-mers (experimental)\n\nAttentions:\n  1. This command only detects single base repeat now.\n\nUsage:\n  unikmer filter [flags] \n\nFlags:\n  -h, --help                help for filter\n  -v, --invert              invert result, i.e., output low-complexity k-mers\n  -o, --out-prefix string   out file prefix (\"-\" for stdout) (default \"-\")\n  -d, --penalty-d int       penalty for different bases (default 1)\n  -s, --penalty-s int       penalty for successive bases (default 3)\n  -t, --threshold int       penalty threshold for filter, higher is stricter (default 15)\n  -w, --window int          window size for checking penalty (default 7)\n\n</code></pre>"},{"location":"usage/#rfilter","title":"rfilter","text":"<pre><code>Filter k-mers by taxonomic rank\n\nAttentions:\n  1. Flag -L/--lower-than and -H/--higher-than are exclusive, and can be\n     used along with -E/--equal-to which values can be different.\n  2. A list of pre-ordered ranks is in ~/.unikmer/ranks.txt, you can use\n     your list by -r/--rank-file, the format specification is below.\n  3. All ranks in taxonomy database should be defined in rank file.\n  4. Ranks can be removed with black list via -B/--black-list.\n  5. TaxIds with no rank can be optionally discarded by -N/--discard-noranks.\n  6. But when filtering with -L/--lower-than, you can use\n    -n/--save-predictable-norank to save some special ranks without order,\n    where rank of the closest higher node is still lower than rank cutoff.\n\nRank file:\n  1. Blank lines or lines starting with \"#\" are ignored.\n  2. Ranks are in decending order and case ignored.\n  3. Ranks with same order should be in one line separated with comma (\",\", no space).\n  4. Ranks without order should be assigned a prefix symbol \"!\" for each rank.\n\nUsage:\n  unikmer rfilter [flags] \n\nFlags:\n  -B, --black-list strings        black list of ranks to discard, e.g., '\"no rank\", \"clade\"'\n  -N, --discard-noranks           discard ranks without order, type \"unikmer filter --help\" for details\n  -R, --discard-root              discard root taxid, defined by --root-taxid\n  -E, --equal-to strings          output taxIDs with rank equal to some ranks, multiple values can be\n                                  separated with comma \",\" (e.g., -E \"genus,species\"), or give multiple\n                                  times (e.g., -E genus -E species)\n  -h, --help                      help for rfilter\n  -H, --higher-than string        output ranks higher than a rank, exclusive with --lower-than\n      --list-order                list defined ranks in order\n      --list-ranks                list ordered ranks in taxonomy database\n  -L, --lower-than string         output ranks lower than a rank, exclusive with --higher-than\n  -o, --out-prefix string         out file prefix (\"-\" for stdout) (default \"-\")\n  -r, --rank-file string          user-defined ordered taxonomic ranks, type \"unikmer rfilter --help\"\n                                  for details\n      --root-taxid uint32         root taxid (default 1)\n  -n, --save-predictable-norank   do not discard some special ranks without order when using -L, where\n                                  rank of the closest higher node is still lower than rank cutoff\n\n</code></pre>"},{"location":"usage/#locate","title":"locate","text":"<pre><code>Locate k-mers in genome\n\nAttention:\n  0. All files should have the 'canonical' flag.\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Output is BED6 format.\n  3. When using experimental flag --circular, leading subsequence of k-1 bp\n     is appending to end of sequence. End position of k-mers that crossing\n     sequence end would be greater than sequence length.\n\nUsage:\n  unikmer locate [flags] \n\nFlags:\n      --circular                  circular genome. type \"unikmer locate -h\" for details\n  -g, --genome strings            genomes in (gzipped) fasta file(s)\n  -h, --help                      help for locate\n  -o, --out-prefix string         out file prefix (\"-\" for stdout) (default \"-\")\n  -B, --seq-name-filter strings   list of regular expressions for filtering out sequences by\n                                  header/name, case ignored.\n\n</code></pre>"},{"location":"usage/#map","title":"map","text":"<pre><code>Mapping k-mers back to the genome and extract successive regions/subsequences\n\nAttention:\n  0. By default, only unique-mapped k-mers are considered.\n     You can use -M/--allow-multiple-mapped-kmerss to allow mutiple-mapped k-mers.\n  1. The 'canonical/scaled/hashed' flags of all files should be consistent.\n  2. Default output is in BED3 format, with left-closed and right-open\n     0-based interval.\n  3. When using flag --circular, end position of subsequences that \n     crossing genome sequence end would be greater than sequence length.\n\nUsage:\n  unikmer map [flags] \n\nAliases:\n  map, uniqs\n\nFlags:\n  -M, --allow-multiple-mapped-kmers    allow multiple mapped k-mers\n      --circular                       circular genome. type \"unikmer uniqs -h\" for details\n  -g, --genome strings                 genomes in (gzipped) fasta file(s)\n  -h, --help                           help for map\n  -X, --max-gap-num int                max number of gaps (consecutive unmapped k-mers)\n  -x, --max-gap-size int               max gap size (the number of consecutive unmapped k-mers)\n  -m, --min-len int                    minimum length of subsequence (default 200)\n  -o, --out-prefix string              out file prefix (\"-\" for stdout) (default \"-\")\n  -a, --output-fasta                   output fasta format instead of BED3\n  -B, --seq-name-filter strings        list of regular expressions for filtering out sequences by\n                                       header/name, case ignored\n  -W, --seqs-in-a-file-as-one-genome   treat seqs in a genome file as one genome\n\n</code></pre>"}]}
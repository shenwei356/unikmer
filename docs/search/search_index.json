{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"unikmer: Toolkit for k-mer with taxonomic information unikmer is a toolkit for nucleic acid k-mer analysis, providing functions including set operation k-mers (sketch) optional with TaxIds but without count information. K-mers are either encoded (k<=32) or hashed (arbitrary k) into uint64 , and serialized in binary file with extension .unik . TaxIds can be assigned when counting k-mers from genome sequences, and LCA (Lowest Common Ancestor) is computed during set opertions including computing union, intersecton, set difference, unique and repeated k-mers. Table of Contents Using cases Installation Commands Binary file Quick start Support License Using cases Finding conserved regions in all genomes of a species. Finding species/strain-specific sequences for designing probes/primers. Installation Downloading executable binary files . Via Bioconda conda install -c bioconda unikmer Commands Usages Counting count Generate k-mers (sketch) from FASTA/Q sequences Information info Information of binary files num Quickly inspect number of k-mers in binary files Format conversion view Read and output binary format to plain text dump Convert plain k-mer text to binary format encode Encode plain k-mer text to integer decode Decode encoded integer to k-mer text Set operations concat Concatenate multiple binary files without removing duplicates inter Intersection of multiple binary files common Find k-mers shared by most of multiple binary files union Union of multiple binary files diff Set difference of multiple binary files Split and merge sort Sort k-mers in binary files to reduce file size split Split k-mers into sorted chunk files tsplit Split k-mers according to TaxId merge Merge k-mers from sorted chunk files Subset head Extract the first N k-mers sample Sample k-mers from binary files grep Search k-mers from binary files filter Filter out low-complexity k-mers rfilter Filter k-mers by taxonomic rank Searching on genomes locate Locate k-mers in genome uniqs Mapping k-mers back to genome and find unique subsequences Misc autocompletion Generate shell autocompletion script version Print version information and check for update Binary file K-mers (represented in uint64 in RAM ) are serialized in 8-Byte (or less Bytes for shorter k-mers in compact format, or much less Bytes for sorted k-mers) arrays and optionally compressed in gzip format with extension of .unik . TaxIds are optionally stored next to k-mers with 4 or less bytes. Compression ratio comparison No TaxIds stored in this test. label encoded-kmer a gzip-compressed b compact-format c sorted d comment plain plain text gzip \u2714 gzipped plain text unik.default \u2714 \u2714 gzipped encoded k-mers in fixed-length byte array unik.compat \u2714 \u2714 \u2714 gzipped encoded k-mers in shorter fixed-length byte array unik.sorted \u2714 \u2714 \u2714 gzipped sorted encoded k-mers a One k-mer is encoded as uint64 and serialized in 8 Bytes. b K-mers file is compressed in gzip format by default, users can switch on global option -C/--no-compress to output non-compressed file. c One k-mer is encoded as uint64 and serialized in 8 Bytes by default. However few Bytes are needed for short k-mers, e.g., 4 Bytes are enough for 15-mers (30 bits). This makes the file more compact with smaller file size, controled by global option -c/--compact . d One k-mer is encoded as uint64 , all k-mers are sorted and compressed using varint-GB algorithm. In all test, flag --canonical is ON when running unikmer count . Quick Start # memusg is for compute time and RAM usage: https://github.com/shenwei356/memusg # counting (only keep the canonical k-mers and compact output) # memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23 --canonical --compact $ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23 --canonical --compact elapsed time: 0.897s peak rss: 192.41 MB # counting (only keep the canonical k-mers and sort k-mers) # memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted --canonical --sort $ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted --canonical --sort elapsed time: 1.136s peak rss: 227.28 MB # counting and assigning global TaxIds $ unikmer count -k 23 -K -s Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted -t 585057 $ unikmer count -k 23 -K -s Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted -t 511145 $ unikmer count -k 23 -K -s A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.sorted -t 349741 # counting minimizer and ouputting in linear order $ unikmer count -k 23 -W 5 -H -K -l A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.m # view $ unikmer view Ecoli-MG1655.fasta.gz.k23.sorted.unik --show-taxid | head -n 3 AAAAAAAAACCATCCAAATCTGG 511145 AAAAAAAAACCGCTAGTATATTC 511145 AAAAAAAAACCTGAAAAAAACGG 511145 # view (hashed k-mers needs original FASTA/Q file) $ unikmer view --show-code --genome A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | head -n 3 CATCCGCCATCTTTGGGGTGTCG 1210726578792 AGCGCAAAATCCCCAAACATGTA 2286899379883 AACTGATTTTTGATGATGACTCC 3542156397282 # find the positions of k-mers $ seqkit locate -M A.muciniphila-ATCC_BAA-835.fasta.gz \\ -f <(unikmer view -a -g A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | seqkit head -n 5 ) \\ | csvtk sort -t -k start:n | head -n 6 | csvtk pretty -t seqID patternName pattern strand start end ----------- ------------------- ----------------------- ------ ----- --- NC_010655.1 2090893901864583115 ATCTTATAAAATAACCACATAAC + 3 25 NC_010655.1 696051979077366638 TTATAAAATAACCACATAACTTA + 6 28 NC_010655.1 390297872016815006 TATAAAATAACCACATAACTTAA + 7 29 NC_010655.1 2582400417208090837 AAAATAACCACATAACTTAAAAA + 10 32 NC_010655.1 3048591415312050785 TAACCACATAACTTAAAAAGAAT + 14 36 # stats $ unikmer stats *.unik -a -j 10 file k canonical hashed scaled include-taxid global-taxid sorted compact gzipped version number description A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik 23 \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 v5.0 860,900 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 349741 \u2713 \u2715 \u2713 v5.0 2,630,905 Ecoli-IAI39.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 585057 \u2713 \u2715 \u2713 v5.0 4,902,266 Ecoli-IAI39.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,902,266 Ecoli-MG1655.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 511145 \u2713 \u2715 \u2713 v5.0 4,546,632 Ecoli-MG1655.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,546,632 # concat $ memusg -t unikmer concat *.k23.sorted.unik -o concat.k23 -c elapsed time: 1.020s peak rss: 25.86 MB # union $ memusg -t unikmer union *.k23.sorted.unik -o union.k23 -s elapsed time: 3.991s peak rss: 590.92 MB # or sorting with limited memory. # note that taxonomy database need some memory. $ memusg -t unikmer sort *.k23.sorted.unik -o union2.k23 -u -m 1M elapsed time: 3.538s peak rss: 324.2 MB $ unikmer view -t union.k23.unik | md5sum 4c038832209278840d4d75944b29219c - $ unikmer view -t union2.k23.unik | md5sum 4c038832209278840d4d75944b29219c - # duplicate k-mers $ memusg -t unikmer sort *.k23.sorted.unik -o dup.k23 -d -m 1M elapsed time: 1.143s peak rss: 240.18 MB # intersection $ memusg -t unikmer inter *.k23.sorted.unik -o inter.k23 elapsed time: 1.481s peak rss: 399.94 MB # difference $ memusg -t unikmer diff -j 10 *.k23.sorted.unik -o diff.k23 -s elapsed time: 0.793s peak rss: 338.06 MB $ ls -lh *.unik -rw-r--r-- 1 shenwei shenwei 9.5M 2\u6708 13 00:55 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik -rw-r--r-- 1 shenwei shenwei 46M 2\u6708 13 00:59 concat.k23.unik -rw-r--r-- 1 shenwei shenwei 8.7M 2\u6708 13 01:00 diff.k23.unik -rw-r--r-- 1 shenwei shenwei 11M 2\u6708 13 01:04 dup.k23.unik -rw-r--r-- 1 shenwei shenwei 18M 2\u6708 13 00:55 Ecoli-IAI39.fasta.gz.k23.sorted.unik -rw-r--r-- 1 shenwei shenwei 21M 2\u6708 13 00:48 Ecoli-IAI39.fasta.gz.k23.unik -rw-r--r-- 1 shenwei shenwei 17M 2\u6708 13 00:55 Ecoli-MG1655.fasta.gz.k23.sorted.unik -rw-r--r-- 1 shenwei shenwei 19M 2\u6708 13 00:48 Ecoli-MG1655.fasta.gz.k23.unik -rw-r--r-- 1 shenwei shenwei 9.5M 2\u6708 13 00:59 inter.k23.unik -rw-r--r-- 1 shenwei shenwei 27M 2\u6708 13 01:04 union2.k23.unik -rw-r--r-- 1 shenwei shenwei 27M 2\u6708 13 00:58 union.k23.unik $ unikmer stats *.unik -a -j 10 file k canonical hashed scaled include-taxid global-taxid sorted compact gzipped version number description A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik 23 \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 v5.0 860,900 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 349741 \u2713 \u2715 \u2713 v5.0 2,630,905 concat.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2715 \u2713 \u2713 v5.0 -1 diff.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2715 \u2715 \u2713 v5.0 2,326,096 dup.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 0 Ecoli-IAI39.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 585057 \u2713 \u2715 \u2713 v5.0 4,902,266 Ecoli-IAI39.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,902,266 Ecoli-MG1655.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 511145 \u2713 \u2715 \u2713 v5.0 4,546,632 Ecoli-MG1655.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,546,632 inter.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 2,576,170 union2.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 6,872,728 union.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 6,872,728 # ----------------------------------------------------------------------------------------- # mapping k-mers to genome g=Ecoli-IAI39.fasta f=inter.k23.unik # to fasta unikmer view $f -a -o $f.fa.gz # make index bwa index $g; samtools faidx $g ncpu=12 ls $f.fa.gz \\ | rush -j 1 -v ref=$g -v j=$ncpu \\ 'bwa aln -o 0 -l 17 -k 0 -t {j} {ref} {} \\ | bwa samse {ref} - {} \\ | samtools view -bS > {}.bam; \\ samtools sort -T {}.tmp -@ {j} {}.bam -o {}.sorted.bam; \\ samtools index {}.sorted.bam; \\ samtools flagstat {}.sorted.bam > {}.sorted.bam.flagstat; \\ /bin/rm {}.bam ' Support Please open an issue to report bugs, propose new functions or ask for help. License MIT License","title":"Home"},{"location":"#unikmer-toolkit-for-k-mer-with-taxonomic-information","text":"unikmer is a toolkit for nucleic acid k-mer analysis, providing functions including set operation k-mers (sketch) optional with TaxIds but without count information. K-mers are either encoded (k<=32) or hashed (arbitrary k) into uint64 , and serialized in binary file with extension .unik . TaxIds can be assigned when counting k-mers from genome sequences, and LCA (Lowest Common Ancestor) is computed during set opertions including computing union, intersecton, set difference, unique and repeated k-mers.","title":"unikmer: Toolkit for k-mer with taxonomic information"},{"location":"#table-of-contents","text":"Using cases Installation Commands Binary file Quick start Support License","title":"Table of Contents"},{"location":"#using-cases","text":"Finding conserved regions in all genomes of a species. Finding species/strain-specific sequences for designing probes/primers.","title":"Using cases"},{"location":"#installation","text":"Downloading executable binary files . Via Bioconda conda install -c bioconda unikmer","title":"Installation"},{"location":"#commands","text":"Usages Counting count Generate k-mers (sketch) from FASTA/Q sequences Information info Information of binary files num Quickly inspect number of k-mers in binary files Format conversion view Read and output binary format to plain text dump Convert plain k-mer text to binary format encode Encode plain k-mer text to integer decode Decode encoded integer to k-mer text Set operations concat Concatenate multiple binary files without removing duplicates inter Intersection of multiple binary files common Find k-mers shared by most of multiple binary files union Union of multiple binary files diff Set difference of multiple binary files Split and merge sort Sort k-mers in binary files to reduce file size split Split k-mers into sorted chunk files tsplit Split k-mers according to TaxId merge Merge k-mers from sorted chunk files Subset head Extract the first N k-mers sample Sample k-mers from binary files grep Search k-mers from binary files filter Filter out low-complexity k-mers rfilter Filter k-mers by taxonomic rank Searching on genomes locate Locate k-mers in genome uniqs Mapping k-mers back to genome and find unique subsequences Misc autocompletion Generate shell autocompletion script version Print version information and check for update","title":"Commands"},{"location":"#binary-file","text":"K-mers (represented in uint64 in RAM ) are serialized in 8-Byte (or less Bytes for shorter k-mers in compact format, or much less Bytes for sorted k-mers) arrays and optionally compressed in gzip format with extension of .unik . TaxIds are optionally stored next to k-mers with 4 or less bytes.","title":"Binary file"},{"location":"#compression-ratio-comparison","text":"No TaxIds stored in this test. label encoded-kmer a gzip-compressed b compact-format c sorted d comment plain plain text gzip \u2714 gzipped plain text unik.default \u2714 \u2714 gzipped encoded k-mers in fixed-length byte array unik.compat \u2714 \u2714 \u2714 gzipped encoded k-mers in shorter fixed-length byte array unik.sorted \u2714 \u2714 \u2714 gzipped sorted encoded k-mers a One k-mer is encoded as uint64 and serialized in 8 Bytes. b K-mers file is compressed in gzip format by default, users can switch on global option -C/--no-compress to output non-compressed file. c One k-mer is encoded as uint64 and serialized in 8 Bytes by default. However few Bytes are needed for short k-mers, e.g., 4 Bytes are enough for 15-mers (30 bits). This makes the file more compact with smaller file size, controled by global option -c/--compact . d One k-mer is encoded as uint64 , all k-mers are sorted and compressed using varint-GB algorithm. In all test, flag --canonical is ON when running unikmer count .","title":"Compression ratio comparison"},{"location":"#quick-start","text":"# memusg is for compute time and RAM usage: https://github.com/shenwei356/memusg # counting (only keep the canonical k-mers and compact output) # memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23 --canonical --compact $ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23 --canonical --compact elapsed time: 0.897s peak rss: 192.41 MB # counting (only keep the canonical k-mers and sort k-mers) # memusg -t unikmer count -k 23 Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted --canonical --sort $ memusg -t unikmer count -k 23 Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted --canonical --sort elapsed time: 1.136s peak rss: 227.28 MB # counting and assigning global TaxIds $ unikmer count -k 23 -K -s Ecoli-IAI39.fasta.gz -o Ecoli-IAI39.fasta.gz.k23.sorted -t 585057 $ unikmer count -k 23 -K -s Ecoli-MG1655.fasta.gz -o Ecoli-MG1655.fasta.gz.k23.sorted -t 511145 $ unikmer count -k 23 -K -s A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.sorted -t 349741 # counting minimizer and ouputting in linear order $ unikmer count -k 23 -W 5 -H -K -l A.muciniphila-ATCC_BAA-835.fasta.gz -o A.muciniphila-ATCC_BAA-835.fasta.gz.m # view $ unikmer view Ecoli-MG1655.fasta.gz.k23.sorted.unik --show-taxid | head -n 3 AAAAAAAAACCATCCAAATCTGG 511145 AAAAAAAAACCGCTAGTATATTC 511145 AAAAAAAAACCTGAAAAAAACGG 511145 # view (hashed k-mers needs original FASTA/Q file) $ unikmer view --show-code --genome A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | head -n 3 CATCCGCCATCTTTGGGGTGTCG 1210726578792 AGCGCAAAATCCCCAAACATGTA 2286899379883 AACTGATTTTTGATGATGACTCC 3542156397282 # find the positions of k-mers $ seqkit locate -M A.muciniphila-ATCC_BAA-835.fasta.gz \\ -f <(unikmer view -a -g A.muciniphila-ATCC_BAA-835.fasta.gz A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik | seqkit head -n 5 ) \\ | csvtk sort -t -k start:n | head -n 6 | csvtk pretty -t seqID patternName pattern strand start end ----------- ------------------- ----------------------- ------ ----- --- NC_010655.1 2090893901864583115 ATCTTATAAAATAACCACATAAC + 3 25 NC_010655.1 696051979077366638 TTATAAAATAACCACATAACTTA + 6 28 NC_010655.1 390297872016815006 TATAAAATAACCACATAACTTAA + 7 29 NC_010655.1 2582400417208090837 AAAATAACCACATAACTTAAAAA + 10 32 NC_010655.1 3048591415312050785 TAACCACATAACTTAAAAAGAAT + 14 36 # stats $ unikmer stats *.unik -a -j 10 file k canonical hashed scaled include-taxid global-taxid sorted compact gzipped version number description A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik 23 \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 v5.0 860,900 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 349741 \u2713 \u2715 \u2713 v5.0 2,630,905 Ecoli-IAI39.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 585057 \u2713 \u2715 \u2713 v5.0 4,902,266 Ecoli-IAI39.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,902,266 Ecoli-MG1655.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 511145 \u2713 \u2715 \u2713 v5.0 4,546,632 Ecoli-MG1655.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,546,632 # concat $ memusg -t unikmer concat *.k23.sorted.unik -o concat.k23 -c elapsed time: 1.020s peak rss: 25.86 MB # union $ memusg -t unikmer union *.k23.sorted.unik -o union.k23 -s elapsed time: 3.991s peak rss: 590.92 MB # or sorting with limited memory. # note that taxonomy database need some memory. $ memusg -t unikmer sort *.k23.sorted.unik -o union2.k23 -u -m 1M elapsed time: 3.538s peak rss: 324.2 MB $ unikmer view -t union.k23.unik | md5sum 4c038832209278840d4d75944b29219c - $ unikmer view -t union2.k23.unik | md5sum 4c038832209278840d4d75944b29219c - # duplicate k-mers $ memusg -t unikmer sort *.k23.sorted.unik -o dup.k23 -d -m 1M elapsed time: 1.143s peak rss: 240.18 MB # intersection $ memusg -t unikmer inter *.k23.sorted.unik -o inter.k23 elapsed time: 1.481s peak rss: 399.94 MB # difference $ memusg -t unikmer diff -j 10 *.k23.sorted.unik -o diff.k23 -s elapsed time: 0.793s peak rss: 338.06 MB $ ls -lh *.unik -rw-r--r-- 1 shenwei shenwei 9.5M 2\u6708 13 00:55 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik -rw-r--r-- 1 shenwei shenwei 46M 2\u6708 13 00:59 concat.k23.unik -rw-r--r-- 1 shenwei shenwei 8.7M 2\u6708 13 01:00 diff.k23.unik -rw-r--r-- 1 shenwei shenwei 11M 2\u6708 13 01:04 dup.k23.unik -rw-r--r-- 1 shenwei shenwei 18M 2\u6708 13 00:55 Ecoli-IAI39.fasta.gz.k23.sorted.unik -rw-r--r-- 1 shenwei shenwei 21M 2\u6708 13 00:48 Ecoli-IAI39.fasta.gz.k23.unik -rw-r--r-- 1 shenwei shenwei 17M 2\u6708 13 00:55 Ecoli-MG1655.fasta.gz.k23.sorted.unik -rw-r--r-- 1 shenwei shenwei 19M 2\u6708 13 00:48 Ecoli-MG1655.fasta.gz.k23.unik -rw-r--r-- 1 shenwei shenwei 9.5M 2\u6708 13 00:59 inter.k23.unik -rw-r--r-- 1 shenwei shenwei 27M 2\u6708 13 01:04 union2.k23.unik -rw-r--r-- 1 shenwei shenwei 27M 2\u6708 13 00:58 union.k23.unik $ unikmer stats *.unik -a -j 10 file k canonical hashed scaled include-taxid global-taxid sorted compact gzipped version number description A.muciniphila-ATCC_BAA-835.fasta.gz.m.unik 23 \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 v5.0 860,900 A.muciniphila-ATCC_BAA-835.fasta.gz.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 349741 \u2713 \u2715 \u2713 v5.0 2,630,905 concat.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2715 \u2713 \u2713 v5.0 -1 diff.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2715 \u2715 \u2713 v5.0 2,326,096 dup.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 0 Ecoli-IAI39.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 585057 \u2713 \u2715 \u2713 v5.0 4,902,266 Ecoli-IAI39.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,902,266 Ecoli-MG1655.fasta.gz.k23.sorted.unik 23 \u2713 \u2715 \u2715 \u2715 511145 \u2713 \u2715 \u2713 v5.0 4,546,632 Ecoli-MG1655.fasta.gz.k23.unik 23 \u2713 \u2715 \u2715 \u2715 \u2715 \u2713 \u2713 v5.0 4,546,632 inter.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 2,576,170 union2.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 6,872,728 union.k23.unik 23 \u2713 \u2715 \u2715 \u2713 \u2713 \u2715 \u2713 v5.0 6,872,728 # ----------------------------------------------------------------------------------------- # mapping k-mers to genome g=Ecoli-IAI39.fasta f=inter.k23.unik # to fasta unikmer view $f -a -o $f.fa.gz # make index bwa index $g; samtools faidx $g ncpu=12 ls $f.fa.gz \\ | rush -j 1 -v ref=$g -v j=$ncpu \\ 'bwa aln -o 0 -l 17 -k 0 -t {j} {ref} {} \\ | bwa samse {ref} - {} \\ | samtools view -bS > {}.bam; \\ samtools sort -T {}.tmp -@ {j} {}.bam -o {}.sorted.bam; \\ samtools index {}.sorted.bam; \\ samtools flagstat {}.sorted.bam > {}.sorted.bam.flagstat; \\ /bin/rm {}.bam '","title":"Quick Start"},{"location":"#support","text":"Please open an issue to report bugs, propose new functions or ask for help.","title":"Support"},{"location":"#license","text":"MIT License","title":"License"},{"location":"download/","text":"Download unikmer is implemented in Go programming language, statically-linked executable binary files are freely available . Current Version v0.19.0 - 2022-04-25 Links OS Arch File, \u4e2d\u56fd\u955c\u50cf Download Count Linux 64-bit unikmer_linux_amd64.tar.gz , \u4e2d\u56fd\u955c\u50cf macOS 64-bit unikmer_darwin_amd64.tar.gz , \u4e2d\u56fd\u955c\u50cf Windows 64-bit unikmer_windows_amd64.exe.tar.gz , \u4e2d\u56fd\u955c\u50cf Notes: please open an issue to request binaries for other platforms. run unikmer version to check update !!! run unikmer autocompletion to update shell autocompletion script !!! Installation Method 1: Install using conda conda install -c bioconda unikmer Method 2: Download binaries Download the compressed executable file of your operating system, and decompress it with tar -zxvf *.tar.gz command or other tools. And then: For Linux-like systems If you have root privilege, simply copy it to /usr/local/bin : sudo cp unikmer /usr/local/bin/ Or copy to anywhere in the environment variable PATH : mkdir -p $HOME/bin/; cp unikmer $HOME/bin/ For Windows , just copy unikmer.exe to C:\\WINDOWS\\system32 . Shell-completion Supported shell: bash|zsh|fish|powershell Bash: # generate completion shell unikmer autocompletion --shell bash # configure if never did. # install bash-completion if the \"complete\" command is not found. echo \"for bcfile in ~/.bash_completion.d/* ; do source \\$bcfile; done\" >> ~/.bash_completion echo \"source ~/.bash_completion\" >> ~/.bashrc Zsh: # generate completion shell unikmer autocompletion --shell zsh --file ~/.zfunc/_unikmer # configure if never did echo 'fpath=( ~/.zfunc \"${fpath[@]}\" )' >> ~/.zshrc echo \"autoload -U compinit; compinit\" >> ~/.zshrc fish: unikmer autocompletion --shell fish --file ~/.config/fish/completions/unikmer.fish Release History v0.19.0 - 2022-04-25 rename command genautocomplete to autocompletion . remove command help . change default value of option -j from 2 to 4 . unikmer count/uniqs/locate : new flag -B/--seq-name-filter for filtering out unwanted sequences like plasmids. unikmer count : add support of .xz and .zst files. v0.18.8 - 2021-09-17 use new version of nthash with better performance. unikmer info : fix typoes. v0.18.7 - 2021-08-30 unikmer : better counting speed by upstream optimization of FASTA/Q parsing. unikmer concat : fix parsing flag -n . v0.17.3 - 2021-05-16 unikmer : fix buiding for 386. #21 v0.17.2 - 2021-02-05 unikmer : slightly speedup for computing LCA. unikmer rfilter: flag -E/--equal-to supports multiple values. new flag -n/--save-predictable-norank : do not discard some special ranks without order when using -L, where rank of the closest higher node is still lower than rank cutoff. v0.17.1 - 2021-01-18 unikmer rfilter: change handling of black list. v0.17.0 - 2021-01-15 syncmer value changed with different hash method . unikmer count : syncmer value changed. v0.16.1 - 2020-12-28 change Header.Number from int64 to uint64 unikmer info : fix recounting problem for unsorted kmers but with Number. v0.16.0 - 2020-12-28 unikmer : binary file format change : fix reading long description, and bump version to 5.0 . better binary file parsing performance. v0.15.0 - 2020-12-25 unikmer : binary file minor change: increase description maximal length from 128 B to 1KB. separating k-mers (sketches) indexing and searching from unikmer , including unikmer db info/index/search . unikmer count : fix syncmer. unikmer dump : new flag --hashed . rename unikmer stats to unikmer info , and add new column description . v0.14.0 - 2020-11-25 unikmer union : fix bug when flag -s not given. unikmer count/uniqs/locate : performance improvement on generating k-mers. unikmer count/db : support scaled/minizimer/syncmer sketch. unikmer stats : change format. v0.13.0 - 2020-10-23 new command unikmer common : Finding k-mers shared by most of multiple binary files. unikmer common/count/diff/grep/rfilter/sort/split/union : faster sorting. unikmer uniqs : better result for flag --circular . unikmer search : fix a bug when searching on database with more than one hash. v0.12.0 - 2020-09-24 unikmer : support longer k (k>32) by saving ntHash. new flag -nocheck-file for not checking binary file. new commands: unikmer db index : constructing index from binary files unikmer db info : printing information of index file unikmer db search : searching sequence from index database unikmer rfilter : change format of rank order file. unikmer inter/union : speedup for single input file. unikmer concat : new flag -t/--taxid for assigning global taxid, this can slightly reduce file size. new flag -n/--number for setting number of k-mers. unikmer num : new flag -f/--force for counting k-mers. unikmer locate : output in BED6. unikmer locate/uniqs : support multiple genome files. unikmer uniqs : stricter multiple mapping limit. new flag -W/--seqs-in-a-file-as-one-genome . unikmer count : new flag -u/--unique for output unique (single copy) kmers v0.11.0 - 2020-07-06 new command: unikmer rfilter for filtering k-mers by taxonomic rank. unikmer inter : new flag -m/--mix-taxid allowing part of files being whithout taxids. unikmer dump : fix a nil pointer bug. unikmer count : fix checking taxid in sequence header. fix setting global taxid. unikmer count/diff/union : slightly reduce memory and speedup when sorting k-mers. unikmer filter : change scoring. unikmer count/locate/uniqs : remove flag --circular . v0.10.0 - 2020-05-21 unikmer : fix loading custom taxonomy files. unikmer count : new flag -d for only count duplicate k-mers, for removing singleton in FASTQ. fix nil pointer bug of -t . unikmer split : fix memery and last odd k-mer mising bug for given ONE sorted input file. unikmer sort : skip loading taxonomy data when neither -u or -d given. unikmer diff : 2X speedup, and requiring 1th file being sorted. unikmer inter : 2-5X speedup, and requiring all files being sorted, sorted output by default. v0.9.0 - 2020-02-18 unikmer : new binary format supporting optional Taxids . deleted command: unikmer subset . new command: unikmer head for extracting the first N k-mers. new command: unikmer tsplit for splitting k-mers according to taxid. unikmer grep : support searching with taxids. unikmer count : support parsing taxid from FASTA/Q header. v0.8.0 - 2019-02-09 unikmer : new option -i/--infile-list , if given, files in the list file are appended to files from cli arguments. improve performance of binary file reading and writing. unikmer sort/split/merge : safer forcing deletion of existed outdir, and better log. unikmer split : performance improvement for single sorted input file. unikmer sort : performance improvement for using -m/--chunk-size . unikmer grep : rewrite, support loading queries from .unik files. unikmer dump : fix number information in output file. unikmer concat : new flag -s/--sorted . v0.7.0 - 2019-09-29 new command unikmer filter : filter low-complexity k-mers. new command unikmer split : split k-mers into sorted chunk files. new command unikmer merge : merge from sorted chunk files. unikmer view : new option -N/--show-code-only for only showing encoded integers. fix output error for -q/--fastq . unikmer uniqs : new option -x/--max-cont-non-uniq-kmers for limiting max continuous non-unique k-mers. new option -X/--max-num-cont-non-uniq-kmers for limiting max number of continuous non-unique k-mers. fix bug for -m/--min-len . unikmer union : new option -d/--repeated for only printing duplicate k-mers. unikmer sort : new option -u/--unique for removing duplicate k-mers. new option -d/--repeated for only printing duplicate k-mers. new option -m/--chunk-size for limiting maximum memory for sorting. unikmer diff : small speed improvements. v0.6.2 - 2019-01-21 unikmer encode : better output for bits presentation of encoded k-mers ( -a/--all ) v0.6.1 - 2019-01-21 unikmer dump : new option -K/--canonical to keep the canonical k-mers. new option -k/--canonical-only to only keep the canonical k-mers. new option -s/--sorted to save sorted k-mers. unikmer encode : add option -K/--canonical to keep the canonical k-mers. v0.6.0 - 2019-01-20 unikmer : check encoded integer overflow new command unikmer encode : encode plain k-mer text to integer new command unikmer decode : decode encoded integer to k-mer text v0.5.3 - 2018-11-28 unikmer count/dump : check file before handling them. v0.5.2 - 2018-11-28 unikmer locate : fix bug. unikmer : doc update. v0.5.1 - 2018-11-07 unikmer locate/uniqs : fix options checking. v0.5.0 - 2018-11-07 unikmer diff : fix concurrency bug when cloning kmers from first file. new command unikmer locate : locate Kmers in genome. new command unikmer uniqs : mapping Kmers back to genome and find unique subsequences. v0.4.4 - 2018-10-27 unikmer : add global option -L/--compression-level . unikmer diff : reduce memory occupation, speed not affected. v0.4.3 - 2018-10-13 unikmer diff : fix bug of hanging when the first file having no Kmers. v0.4.2 - 2018-10-13 unikmer stats/diff : more intuitional output v0.4.1 - 2018-10-10 Better performance of writing and reading binary files v0.4.0 - 2018-10-09 Binary serialization format changed. new command unikmer sort : sort binary files unikmer count/diff/union/inter : better performance, add option to sort Kmers which significantly reduces file size unikmer dump : changed option unikmer count : changed option v0.3.1 - 2018-09-25 Binary serialization format changed. new command unikmer stats : statistics of binary files. unikmer : adding global option -i/--infile-list for reading files listed in file. unikmer diff : fixed a concurrency bug when no diff found. v0.2.1 - 2018-09-23 unikmer count : performance improvement and new option --canonical for only keeping canonical Kmers. v0.2.0 - 2018-09-09 new command unikmer sample : sample Kmers from binary files. new global options: -c, --compact : write more compact binary file with little loss of speed. -C, --no-compress : do not compress binary file (not recommended). some improvements. v0.1.0 - 2018-08-09 first release","title":"Download"},{"location":"download/#download","text":"unikmer is implemented in Go programming language, statically-linked executable binary files are freely available .","title":"Download"},{"location":"download/#current-version","text":"","title":"Current Version"},{"location":"download/#v0190-2022-04-25","text":"","title":"v0.19.0 - 2022-04-25"},{"location":"download/#links","text":"OS Arch File, \u4e2d\u56fd\u955c\u50cf Download Count Linux 64-bit unikmer_linux_amd64.tar.gz , \u4e2d\u56fd\u955c\u50cf macOS 64-bit unikmer_darwin_amd64.tar.gz , \u4e2d\u56fd\u955c\u50cf Windows 64-bit unikmer_windows_amd64.exe.tar.gz , \u4e2d\u56fd\u955c\u50cf Notes: please open an issue to request binaries for other platforms. run unikmer version to check update !!! run unikmer autocompletion to update shell autocompletion script !!!","title":"Links"},{"location":"download/#installation","text":"","title":"Installation"},{"location":"download/#method-1-install-using-conda","text":"conda install -c bioconda unikmer","title":"Method 1: Install using conda"},{"location":"download/#method-2-download-binaries","text":"Download the compressed executable file of your operating system, and decompress it with tar -zxvf *.tar.gz command or other tools. And then: For Linux-like systems If you have root privilege, simply copy it to /usr/local/bin : sudo cp unikmer /usr/local/bin/ Or copy to anywhere in the environment variable PATH : mkdir -p $HOME/bin/; cp unikmer $HOME/bin/ For Windows , just copy unikmer.exe to C:\\WINDOWS\\system32 .","title":"Method 2: Download binaries"},{"location":"download/#shell-completion","text":"Supported shell: bash|zsh|fish|powershell Bash: # generate completion shell unikmer autocompletion --shell bash # configure if never did. # install bash-completion if the \"complete\" command is not found. echo \"for bcfile in ~/.bash_completion.d/* ; do source \\$bcfile; done\" >> ~/.bash_completion echo \"source ~/.bash_completion\" >> ~/.bashrc Zsh: # generate completion shell unikmer autocompletion --shell zsh --file ~/.zfunc/_unikmer # configure if never did echo 'fpath=( ~/.zfunc \"${fpath[@]}\" )' >> ~/.zshrc echo \"autoload -U compinit; compinit\" >> ~/.zshrc fish: unikmer autocompletion --shell fish --file ~/.config/fish/completions/unikmer.fish","title":"Shell-completion"},{"location":"download/#release-history","text":"","title":"Release History"},{"location":"download/#v0190-2022-04-25_1","text":"rename command genautocomplete to autocompletion . remove command help . change default value of option -j from 2 to 4 . unikmer count/uniqs/locate : new flag -B/--seq-name-filter for filtering out unwanted sequences like plasmids. unikmer count : add support of .xz and .zst files.","title":"v0.19.0 - 2022-04-25"},{"location":"download/#v0188-2021-09-17","text":"use new version of nthash with better performance. unikmer info : fix typoes.","title":"v0.18.8 - 2021-09-17"},{"location":"download/#v0187-2021-08-30","text":"unikmer : better counting speed by upstream optimization of FASTA/Q parsing. unikmer concat : fix parsing flag -n .","title":"v0.18.7 - 2021-08-30"},{"location":"download/#v0173-2021-05-16","text":"unikmer : fix buiding for 386. #21","title":"v0.17.3 - 2021-05-16"},{"location":"download/#v0172-2021-02-05","text":"unikmer : slightly speedup for computing LCA. unikmer rfilter: flag -E/--equal-to supports multiple values. new flag -n/--save-predictable-norank : do not discard some special ranks without order when using -L, where rank of the closest higher node is still lower than rank cutoff.","title":"v0.17.2 - 2021-02-05"},{"location":"download/#v0171-2021-01-18","text":"unikmer rfilter: change handling of black list.","title":"v0.17.1 - 2021-01-18"},{"location":"download/#v0170-2021-01-15","text":"syncmer value changed with different hash method . unikmer count : syncmer value changed.","title":"v0.17.0 - 2021-01-15"},{"location":"download/#v0161-2020-12-28","text":"change Header.Number from int64 to uint64 unikmer info : fix recounting problem for unsorted kmers but with Number.","title":"v0.16.1 - 2020-12-28"},{"location":"download/#v0160-2020-12-28","text":"unikmer : binary file format change : fix reading long description, and bump version to 5.0 . better binary file parsing performance.","title":"v0.16.0 - 2020-12-28"},{"location":"download/#v0150-2020-12-25","text":"unikmer : binary file minor change: increase description maximal length from 128 B to 1KB. separating k-mers (sketches) indexing and searching from unikmer , including unikmer db info/index/search . unikmer count : fix syncmer. unikmer dump : new flag --hashed . rename unikmer stats to unikmer info , and add new column description .","title":"v0.15.0 - 2020-12-25"},{"location":"download/#v0140-2020-11-25","text":"unikmer union : fix bug when flag -s not given. unikmer count/uniqs/locate : performance improvement on generating k-mers. unikmer count/db : support scaled/minizimer/syncmer sketch. unikmer stats : change format.","title":"v0.14.0 - 2020-11-25"},{"location":"download/#v0130-2020-10-23","text":"new command unikmer common : Finding k-mers shared by most of multiple binary files. unikmer common/count/diff/grep/rfilter/sort/split/union : faster sorting. unikmer uniqs : better result for flag --circular . unikmer search : fix a bug when searching on database with more than one hash.","title":"v0.13.0 - 2020-10-23"},{"location":"download/#v0120-2020-09-24","text":"unikmer : support longer k (k>32) by saving ntHash. new flag -nocheck-file for not checking binary file. new commands: unikmer db index : constructing index from binary files unikmer db info : printing information of index file unikmer db search : searching sequence from index database unikmer rfilter : change format of rank order file. unikmer inter/union : speedup for single input file. unikmer concat : new flag -t/--taxid for assigning global taxid, this can slightly reduce file size. new flag -n/--number for setting number of k-mers. unikmer num : new flag -f/--force for counting k-mers. unikmer locate : output in BED6. unikmer locate/uniqs : support multiple genome files. unikmer uniqs : stricter multiple mapping limit. new flag -W/--seqs-in-a-file-as-one-genome . unikmer count : new flag -u/--unique for output unique (single copy) kmers","title":"v0.12.0 - 2020-09-24"},{"location":"download/#v0110-2020-07-06","text":"new command: unikmer rfilter for filtering k-mers by taxonomic rank. unikmer inter : new flag -m/--mix-taxid allowing part of files being whithout taxids. unikmer dump : fix a nil pointer bug. unikmer count : fix checking taxid in sequence header. fix setting global taxid. unikmer count/diff/union : slightly reduce memory and speedup when sorting k-mers. unikmer filter : change scoring. unikmer count/locate/uniqs : remove flag --circular .","title":"v0.11.0 - 2020-07-06"},{"location":"download/#v0100-2020-05-21","text":"unikmer : fix loading custom taxonomy files. unikmer count : new flag -d for only count duplicate k-mers, for removing singleton in FASTQ. fix nil pointer bug of -t . unikmer split : fix memery and last odd k-mer mising bug for given ONE sorted input file. unikmer sort : skip loading taxonomy data when neither -u or -d given. unikmer diff : 2X speedup, and requiring 1th file being sorted. unikmer inter : 2-5X speedup, and requiring all files being sorted, sorted output by default.","title":"v0.10.0 - 2020-05-21"},{"location":"download/#v090-2020-02-18","text":"unikmer : new binary format supporting optional Taxids . deleted command: unikmer subset . new command: unikmer head for extracting the first N k-mers. new command: unikmer tsplit for splitting k-mers according to taxid. unikmer grep : support searching with taxids. unikmer count : support parsing taxid from FASTA/Q header.","title":"v0.9.0 - 2020-02-18"},{"location":"download/#v080-2019-02-09","text":"unikmer : new option -i/--infile-list , if given, files in the list file are appended to files from cli arguments. improve performance of binary file reading and writing. unikmer sort/split/merge : safer forcing deletion of existed outdir, and better log. unikmer split : performance improvement for single sorted input file. unikmer sort : performance improvement for using -m/--chunk-size . unikmer grep : rewrite, support loading queries from .unik files. unikmer dump : fix number information in output file. unikmer concat : new flag -s/--sorted .","title":"v0.8.0 - 2019-02-09"},{"location":"download/#v070-2019-09-29","text":"new command unikmer filter : filter low-complexity k-mers. new command unikmer split : split k-mers into sorted chunk files. new command unikmer merge : merge from sorted chunk files. unikmer view : new option -N/--show-code-only for only showing encoded integers. fix output error for -q/--fastq . unikmer uniqs : new option -x/--max-cont-non-uniq-kmers for limiting max continuous non-unique k-mers. new option -X/--max-num-cont-non-uniq-kmers for limiting max number of continuous non-unique k-mers. fix bug for -m/--min-len . unikmer union : new option -d/--repeated for only printing duplicate k-mers. unikmer sort : new option -u/--unique for removing duplicate k-mers. new option -d/--repeated for only printing duplicate k-mers. new option -m/--chunk-size for limiting maximum memory for sorting. unikmer diff : small speed improvements.","title":"v0.7.0 - 2019-09-29"},{"location":"download/#v062-2019-01-21","text":"unikmer encode : better output for bits presentation of encoded k-mers ( -a/--all )","title":"v0.6.2 - 2019-01-21"},{"location":"download/#v061-2019-01-21","text":"unikmer dump : new option -K/--canonical to keep the canonical k-mers. new option -k/--canonical-only to only keep the canonical k-mers. new option -s/--sorted to save sorted k-mers. unikmer encode : add option -K/--canonical to keep the canonical k-mers.","title":"v0.6.1 - 2019-01-21"},{"location":"download/#v060-2019-01-20","text":"unikmer : check encoded integer overflow new command unikmer encode : encode plain k-mer text to integer new command unikmer decode : decode encoded integer to k-mer text","title":"v0.6.0 - 2019-01-20"},{"location":"download/#v053-2018-11-28","text":"unikmer count/dump : check file before handling them.","title":"v0.5.3 - 2018-11-28"},{"location":"download/#v052-2018-11-28","text":"unikmer locate : fix bug. unikmer : doc update.","title":"v0.5.2 - 2018-11-28"},{"location":"download/#v051-2018-11-07","text":"unikmer locate/uniqs : fix options checking.","title":"v0.5.1 - 2018-11-07"},{"location":"download/#v050-2018-11-07","text":"unikmer diff : fix concurrency bug when cloning kmers from first file. new command unikmer locate : locate Kmers in genome. new command unikmer uniqs : mapping Kmers back to genome and find unique subsequences.","title":"v0.5.0 - 2018-11-07"},{"location":"download/#v044-2018-10-27","text":"unikmer : add global option -L/--compression-level . unikmer diff : reduce memory occupation, speed not affected.","title":"v0.4.4 - 2018-10-27"},{"location":"download/#v043-2018-10-13","text":"unikmer diff : fix bug of hanging when the first file having no Kmers.","title":"v0.4.3 - 2018-10-13"},{"location":"download/#v042-2018-10-13","text":"unikmer stats/diff : more intuitional output","title":"v0.4.2 - 2018-10-13"},{"location":"download/#v041-2018-10-10","text":"Better performance of writing and reading binary files","title":"v0.4.1 - 2018-10-10"},{"location":"download/#v040-2018-10-09","text":"Binary serialization format changed. new command unikmer sort : sort binary files unikmer count/diff/union/inter : better performance, add option to sort Kmers which significantly reduces file size unikmer dump : changed option unikmer count : changed option","title":"v0.4.0 - 2018-10-09"},{"location":"download/#v031-2018-09-25","text":"Binary serialization format changed. new command unikmer stats : statistics of binary files. unikmer : adding global option -i/--infile-list for reading files listed in file. unikmer diff : fixed a concurrency bug when no diff found.","title":"v0.3.1 - 2018-09-25"},{"location":"download/#v021-2018-09-23","text":"unikmer count : performance improvement and new option --canonical for only keeping canonical Kmers.","title":"v0.2.1 - 2018-09-23"},{"location":"download/#v020-2018-09-09","text":"new command unikmer sample : sample Kmers from binary files. new global options: -c, --compact : write more compact binary file with little loss of speed. -C, --no-compress : do not compress binary file (not recommended). some improvements.","title":"v0.2.0 - 2018-09-09"},{"location":"download/#v010-2018-08-09","text":"first release","title":"v0.1.0 - 2018-08-09"},{"location":"usage/","text":"Usage summary Category Command Input In.sorted In.flag-consistency Output Out.sorted Out.unique Counting count fastx / / .unik optional optional Information info .unik optional no need tsv / / num .unik optional no need tsv / / Format conversion view .unik optional required tsv / / dump tsv optional / .unik optional follow input encode tsv / / tsv / / decode tsv / / tsv / / Set operations concat .unik optional required .unik optional no inter .unik required required .unik yes yes common .unik required required .unik yes yes union .unik optional required .unik optional yes diff .unik 1th file required required .unik optional yes Split and merge sort .unik optional required .unik yes optional split .unik optional required .unik yes optional tsplit .unik required required .unik yes yes merge .unik required required .unik yes optional Subset head .unik optional required .unik follow input follow input sample .unik optional required .unik follow input follow input grep .unik optional required .unik follow input optional filter .unik optional required .unik follow input follow input rfilter .unik optional required .unik follow input follow input Searching on genomes locate .unik, fasta optional required tsv / / uniqs .unik, fasta optional required bed/fasta / / unikmer unikmer - Toolkit for k-mer with taxonomic information unikmer is a toolkit for nucleic acid k-mer analysis, providing functions including set operation on k-mers optional with TaxIds but without count information. K-mers are either encoded (k<=32) or hashed (arbitrary k) into 'uint64', and serialized in binary file with extension '.unik'. TaxIds can be assigned when counting k-mers from genome sequences, and LCA (Lowest Common Ancestor) is computed during set opertions including computing union, intersection, set difference, unique and repeated k-mers. Version: v0.19.0 Author: Wei Shen <shenwei356@gmail.com> Documents : https://bioinf.shenwei.me/unikmer Source code: https://github.com/shenwei356/unikmer Dataset (optional): Manipulating k-mers with TaxIds needs taxonomy file from e.g., NCBI Taxonomy database, please extract \"nodes.dmp\", \"names.dmp\", \"delnodes.dmp\" and \"merged.dmp\" from link below into ~/.unikmer/ , ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz , or some other directory, and later you can refer to using flag --data-dir or environment variable UNIKMER_DB. For GTDB, use 'taxonkit create-taxdump' to create NCBI-style taxonomy dump files, or download from: https://github.com/shenwei356/gtdb-taxonomy Note that TaxIds are represented using uint32 and stored in 4 or less bytes, all TaxIds should be in the range of [1, 4294967295] Usage: unikmer [command] Available Commands: autocompletion Generate shell autocompletion script (bash|zsh|fish|powershell) common Find k-mers shared by most of multiple binary files concat Concatenate multiple binary files without removing duplicates count Generate k-mers (sketch) from FASTA/Q sequences decode Decode encoded integer to k-mer text diff Set difference of multiple binary files dump Convert plain k-mer text to binary format encode Encode plain k-mer text to integer filter Filter out low-complexity k-mers (experimental) grep Search k-mers from binary files head Extract the first N k-mers info Information of binary files inter Intersection of multiple binary files locate Locate k-mers in genome merge Merge k-mers from sorted chunk files num Quickly inspect number of k-mers in binary files rfilter Filter k-mers by taxonomic rank sample Sample k-mers from binary files sort Sort k-mers in binary files to reduce file size split Split k-mers into sorted chunk files tsplit Split k-mers according to taxid union Union of multiple binary files uniqs Mapping k-mers back to genome and find unique subsequences version Print version information and check for update view Read and output binary format to plain text Flags: -c, --compact write compact binary file with little loss of speed --compression-level int compression level (default -1) --data-dir string directory containing NCBI Taxonomy files, including nodes.dmp, names.dmp, merged.dmp and delnodes.dmp (default \"/home/shenwei/.unikmer\") -h, --help help for unikmer -I, --ignore-taxid ignore taxonomy information -i, --infile-list string file of input files list (one file per line), if given, they are appended to files from cli arguments --max-taxid uint32 for smaller TaxIds, we can use less space to store TaxIds. default value is 1<<32-1, that's enough for NCBI Taxonomy TaxIds (default 4294967295) -C, --no-compress do not compress binary file (not recommended) --nocheck-file do not check binary file, when using process substitution or named pipe -j, --threads int number of CPUs to use (default 4) --verbose print verbose information count Generate k-mers (sketch) from FASTA/Q sequences K-mer: 1. K-mer code (k<=32) 2. Hashed k-mer (ntHash) K-mer sketches: 1. Scaled MinHash 2. Minimizer 3. Closed Syncmer Usage: unikmer count [flags] -K -k <k> -u -s [-t <taxid>] <seq files> -o <out prefix> Flags: -K, --canonical only keep the canonical k-mers --circular circular genome -H, --hash save hash of k-mer, automatically on for k>32. This flag overides global flag -c/--compact -h, --help help for count -k, --kmer-len int k-mer length -l, --linear output k-mers in linear order -W, --minimizer-w int minimizer window size -V, --more-verbose print extra verbose information -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -T, --parse-taxid parse taxid from FASTA/Q header -r, --parse-taxid-regexp string regular expression for passing taxid -d, --repeated only count duplicate k-mers, for removing singleton in FASTQ -D, --scale int scale/down-sample factor (default 1) -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored. -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact -S, --syncmer-s int closed syncmer length -t, --taxid uint32 global taxid -u, --unique only count unique k-mers, which are not duplicate info Information of binary files Tips: 1. For lots of small files (especially on SDD), use big value of '-j' to parallelize counting. Usage: unikmer info [flags] Aliases: info, stats Flags: -a, --all all information, including number of k-mers -b, --basename only output basename of files -h, --help help for info -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") -e, --skip-err skip error, only show warning message --symbol-false string smybol for false (default \"\u2715\") --symbol-true string smybol for true (default \"\u2713\") -T, --tabular output in machine-friendly tabular format view Read and output binary format to plain text Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer view [flags] Flags: -a, --fasta output in FASTA format, with encoded integer as FASTA header -q, --fastq output in FASTQ format, with encoded integer as FASTQ header -g, --genome strings genomes in (gzipped) fasta file(s) for decoding hashed k-mers -h, --help help for view -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") -n, --show-code show encoded integer along with k-mer -N, --show-code-only only show encoded integers, faster than cutting from result of -n/--show-cde -t, --show-taxid show taxid -T, --show-taxid-only show taxid only dump Convert plain k-mer text to binary format Attentions: 1. Input should be one k-mer per line, or tab-delimited two columns with a k-mer and it's taxid. 2. You can also assign a global taxid with flag -t/--taxid. Usage: unikmer dump [flags] Flags: -K, --canonical save the canonical k-mers -O, --canonical-only only save the canonical k-mers. This flag overides -K/--canonical -H, --hash save hash of k-mer, automatically on for k>32. This flag overides global flag -c/--compact --hashed giving hash values of k-mers, This flag overides global flag -c/--compact -h, --help help for dump -k, --kmer-len int k-mer length -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sorted input k-mers are sorted -t, --taxid uint32 global taxid -u, --unique remove duplicate k-mers encode Encode plain k-mer text to integer Usage: unikmer encode [flags] Flags: -a, --all output all data: orginial k-mer, parsed k-mer, encoded integer, encode bits -K, --canonical keep the canonical k-mers -H, --hash save hash of k-mer, automatically on for k>32 -h, --help help for encode -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") decode Decode encoded integer to k-mer text Usage: unikmer decode [flags] Flags: -a, --all output all data: encoded integer, decoded k-mer -h, --help help for decode -k, --kmer-len int k-mer length -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") concat Concatenate multiple binary files without removing duplicates Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer concat [flags] Flags: -h, --help help for concat -n, --number int number of k-mers (default -1) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sorted input k-mers are sorted -t, --taxid uint32 global taxid inter Intersection of multiple binary files Attentions: 0. All input files should be sorted, and output file is sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Taxid information could be inconsistent when using flag --mix-taxid. Tips: 1. For comparing TWO files with really huge number of k-mers, you can use 'unikmer sort -u -m 100M' for each file, and then 'unikmer merge -' from them. 2. Put the smallest file in the beginning to reduce memory usage. Usage: unikmer inter [flags] Flags: -h, --help help for inter -m, --mix-taxid allow part of files being whithout taxids -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") common Find k-mers shared by most of multiple binary files This command is similar to \"unikmer inter\" but with looser restriction, k-mers shared by some number/proportion of multiple files are outputted. Attentions: 0. All input files should be sorted, and output file is sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Taxid information could be inconsistent when using flag --mix-taxid. 3. At most 65535 input files allowed. Tips: 1. For comparing TWO files with really huge number of k-mers, you can use 'unikmer sort -u -m 100M' for each file, and then 'unikmer merge -' from them. 2. Put the smallest file in the beginning to reduce memory usage. Usage: unikmer common [flags] Flags: -h, --help help for common -m, --mix-taxid allow part of files being whithout taxids -n, --number int minimum number of files that share a k-mer (overides -p/--proportion) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -p, --proportion float minimum proportion of files that share a k-mer (default 1) union Union of multiple binary files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Tips: 1. 'unikmer sort -u' is slightly faster in cost of more memory usage. 2. For really huge number of k-mers, you can use 'unikmer sort -m 100M -u'. 3. For large number of sorted .unik files, you can use 'unikmer merge'. Usage: unikmer union [flags] Flags: -h, --help help for union -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact diff Set difference of multiple binary files Attentions: 0. The first file should be sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. By default taxids in the 2nd and later files are ignored. 3. You can switch on flag -t/--compare-taxid, and input files should ALL have or don't have taxid information. A same k-mer found but query taxid equals to target taxid, or query taxid is ancester of target taxid, this k-mer remains. Tips: 1. Increasing threads number (-j/--threads) to accelerate computation when dealing with lots of files, in cost of more memory occupation. Usage: unikmer diff [flags] Flags: -t, --compare-taxid take taxid into consideration. type unikmer \"diff -h\" for detail -h, --help help for diff -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact sort Sort k-mers in binary files to reduce file size Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Notes: 1. When sorting from large number of files, this command is equivalent to 'unikmer split' + 'unikmer merge'. Tips: 1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size depends on k-mers and file save mode (sorted/compact/normal). 2. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. 3. For sorted input files, the memory usage is very low and speed is fast. Usage: unikmer sort [flags] Flags: -m, --chunk-size string split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer sort -h\" for detail --force overwrite tmp dir -h, --help help for sort -k, --keep-tmp-dir keep tmp dir -M, --max-open-files int max number of open files (default 400) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -d, --repeated only print duplicate k-mers -t, --tmp-dir string directory for intermediate files (default \"./\") -u, --unique remove duplicate k-mers split Split k-mers into sorted chunk files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Tips: 1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size depends on k-mers and file save mode (sorted/compact/normal). 2. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. 3. For sorted input files, the memory usage is very low and speed is fast. Usage: unikmer split [flags] Flags: -m, --chunk-size string split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer sort -h\" for detail --force overwrite output directory -h, --help help for split -O, --out-dir string output directory -d, --repeated split for further printing duplicate k-mers -u, --unique split for further removing duplicate k-mers tsplit Split k-mers according to taxid Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have taxid information. 3. Input files should be sorted using 'unikmer sort'. 4. All k-mers will loaded into RAM, for big input files, you can 'split' them first, 'tsplit' and then 'concat' for every taxid. Tips: 1. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. Usage: unikmer tsplit [flags] Flags: --force overwrite output directory -h, --help help for tsplit -O, --out-dir string output directory -o, --out-prefix string out file prefix (default \"tsplit\") merge Merge k-mers from sorted chunk files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. 3. Input files should be sorted. Tips: 1. If you don't need to compute unique or repeated k-mers, use 'unikmer concat -s', which is faster. Usage: unikmer merge [flags] Flags: --force overwrite tmp dir -h, --help help for merge -D, --is-dir intput files are directory containing chunk files -k, --keep-tmp-dir keep tmp dir -M, --max-open-files int max number of open files (default 400) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -p, --pattern string chunk file pattern (regular expression) (default \"^chunk_\\\\d+\\\\.unik$\") -d, --repeated only print duplicate k-mers -t, --tmp-dir string directory for intermediate files (default \"./\") -u, --unique remove duplicate k-mers head Extract the first N k-mers Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer head [flags] Flags: -h, --help help for head -n, --number int number of k-mers to extract (default 10) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") sample Sample k-mers from binary files. The Sampling type is fixed sampling. Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer sample [flags] Flags: -h, --help help for sample -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --start int start location (default 1) -w, --window int window size (default 1) grep Search k-mers from binary files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Canonical k-mers are used and outputted. 3. Input files should ALL have or don't have taxid information. Tips: 1. Increase value of '-j' for better performance when dealing with lots of files, especially on SDD. 2. For searching using binary .unik file, use 'unikmer inter --mix-taxid', which is faster than 'unikmer grep' in single-thread mode. Usage: unikmer grep [flags] Flags: -D, --degenerate query k-mers contains degenerate base --force overwrite output directory -h, --help help for grep -v, --invert-match invert the sense of matching, to select non-matching records -m, --multiple-outfiles write results into separated files for multiple input files -O, --out-dir string output directory (default \"unikmer-grep\") -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -S, --out-suffix string output suffix (default \".grep\") -q, --query strings query k-mers/taxids (multiple values delimted by comma supported) -f, --query-file strings query file (one k-mer/taxid per line) -t, --query-is-taxid queries are taxids -F, --query-unik-file strings query file in .unik format -d, --repeated only print duplicate k-mers -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact -u, --unique remove duplicate k-mers filter Filter out low-complexity k-mers (experimental) Attentions: 1. This command only detects single base repeat now. Usage: unikmer filter [flags] Flags: -h, --help help for filter -v, --invert invert result, i.e., output low-complexity k-mers -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -d, --penalty-d int penalty for different bases (default 1) -s, --penalty-s int penalty for successive bases (default 3) -t, --threshold int penalty threshold for filter, higher is stricter (default 15) -w, --window int window size for checking penalty (default 7) rfilter Filter k-mers by taxonomic rank Attentions: 1. Flag -L/--lower-than and -H/--higher-than are exclusive, and can be used along with -E/--equal-to which values can be different. 2. A list of pre-ordered ranks is in ~/.unikmer/ranks.txt, you can use your list by -r/--rank-file, the format specification is below. 3. All ranks in taxonomy database should be defined in rank file. 4. Ranks can be removed with black list via -B/--black-list. 5. TaxIds with no rank can be optionally discarded by -N/--discard-noranks. 6. But when filtering with -L/--lower-than, you can use -n/--save-predictable-norank to save some special ranks without order, where rank of the closest higher node is still lower than rank cutoff. Rank file: 1. Blank lines or lines starting with \"#\" are ignored. 2. Ranks are in decending order and case ignored. 3. Ranks with same order should be in one line separated with comma (\",\", no space). 4. Ranks without order should be assigned a prefix symbol \"!\" for each rank. Usage: unikmer rfilter [flags] Flags: -B, --black-list strings black list of ranks to discard, e.g., '\"no rank\", \"clade\"' -N, --discard-noranks discard ranks without order, type \"unikmer filter --help\" for details -R, --discard-root discard root taxid, defined by --root-taxid -E, --equal-to strings output taxIDs with rank equal to some ranks, multiple values can be separated with comma \",\" (e.g., -E \"genus,species\"), or give multiple times (e.g., -E genus -E species) -h, --help help for rfilter -H, --higher-than string output ranks higher than a rank, exclusive with --lower-than --list-order list defined ranks in order --list-ranks list ordered ranks in taxonomy database -L, --lower-than string output ranks lower than a rank, exclusive with --higher-than -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -r, --rank-file string user-defined ordered taxonomic ranks, type \"unikmer rfilter --help\" for details --root-taxid uint32 root taxid (default 1) -n, --save-predictable-norank do not discard some special ranks without order when using -L, where rank of the closest higher node is still lower than rank cutoff locate Locate k-mers in genome Attention: 0. All files should have the 'canonical' flag. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Output is BED6 format. 3. When using experimental flag --circular, leading subsequence of k-1 bp is appending to end of sequence. End position of k-mers that crossing sequence end would be greater than sequence length. Usage: unikmer locate [flags] Flags: --circular circular genome. type \"unikmer locate -h\" for details -g, --genome strings genomes in (gzipped) fasta file(s) -h, --help help for locate -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored. uniqs Mapping k-mers back to genome and find unique subsequences Attention: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Default output is in BED3 format, with left-closed and right-open 0-based interval. 3. When using flag --circular, end position of subsequences that crossing genome sequence end would be greater than sequence length. Usage: unikmer uniqs [flags] Flags: -M, --allow-multiple-mapped-kmer allow multiple mapped k-mers --circular circular genome. type \"unikmer uniqs -h\" for details -g, --genome strings genomes in (gzipped) fasta file(s) -h, --help help for uniqs -x, --max-cont-non-uniq-kmers int max continuous non-unique k-mers -X, --max-num-cont-non-uniq-kmers int max number of continuous non-unique k-mers -m, --min-len int minimum length of subsequence (default 200) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -a, --output-fasta output fasta format instead of BED3 -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored. -W, --seqs-in-a-file-as-one-genome treat seqs in a genome file as one genome","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#summary","text":"Category Command Input In.sorted In.flag-consistency Output Out.sorted Out.unique Counting count fastx / / .unik optional optional Information info .unik optional no need tsv / / num .unik optional no need tsv / / Format conversion view .unik optional required tsv / / dump tsv optional / .unik optional follow input encode tsv / / tsv / / decode tsv / / tsv / / Set operations concat .unik optional required .unik optional no inter .unik required required .unik yes yes common .unik required required .unik yes yes union .unik optional required .unik optional yes diff .unik 1th file required required .unik optional yes Split and merge sort .unik optional required .unik yes optional split .unik optional required .unik yes optional tsplit .unik required required .unik yes yes merge .unik required required .unik yes optional Subset head .unik optional required .unik follow input follow input sample .unik optional required .unik follow input follow input grep .unik optional required .unik follow input optional filter .unik optional required .unik follow input follow input rfilter .unik optional required .unik follow input follow input Searching on genomes locate .unik, fasta optional required tsv / / uniqs .unik, fasta optional required bed/fasta / /","title":"summary"},{"location":"usage/#unikmer","text":"unikmer - Toolkit for k-mer with taxonomic information unikmer is a toolkit for nucleic acid k-mer analysis, providing functions including set operation on k-mers optional with TaxIds but without count information. K-mers are either encoded (k<=32) or hashed (arbitrary k) into 'uint64', and serialized in binary file with extension '.unik'. TaxIds can be assigned when counting k-mers from genome sequences, and LCA (Lowest Common Ancestor) is computed during set opertions including computing union, intersection, set difference, unique and repeated k-mers. Version: v0.19.0 Author: Wei Shen <shenwei356@gmail.com> Documents : https://bioinf.shenwei.me/unikmer Source code: https://github.com/shenwei356/unikmer Dataset (optional): Manipulating k-mers with TaxIds needs taxonomy file from e.g., NCBI Taxonomy database, please extract \"nodes.dmp\", \"names.dmp\", \"delnodes.dmp\" and \"merged.dmp\" from link below into ~/.unikmer/ , ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz , or some other directory, and later you can refer to using flag --data-dir or environment variable UNIKMER_DB. For GTDB, use 'taxonkit create-taxdump' to create NCBI-style taxonomy dump files, or download from: https://github.com/shenwei356/gtdb-taxonomy Note that TaxIds are represented using uint32 and stored in 4 or less bytes, all TaxIds should be in the range of [1, 4294967295] Usage: unikmer [command] Available Commands: autocompletion Generate shell autocompletion script (bash|zsh|fish|powershell) common Find k-mers shared by most of multiple binary files concat Concatenate multiple binary files without removing duplicates count Generate k-mers (sketch) from FASTA/Q sequences decode Decode encoded integer to k-mer text diff Set difference of multiple binary files dump Convert plain k-mer text to binary format encode Encode plain k-mer text to integer filter Filter out low-complexity k-mers (experimental) grep Search k-mers from binary files head Extract the first N k-mers info Information of binary files inter Intersection of multiple binary files locate Locate k-mers in genome merge Merge k-mers from sorted chunk files num Quickly inspect number of k-mers in binary files rfilter Filter k-mers by taxonomic rank sample Sample k-mers from binary files sort Sort k-mers in binary files to reduce file size split Split k-mers into sorted chunk files tsplit Split k-mers according to taxid union Union of multiple binary files uniqs Mapping k-mers back to genome and find unique subsequences version Print version information and check for update view Read and output binary format to plain text Flags: -c, --compact write compact binary file with little loss of speed --compression-level int compression level (default -1) --data-dir string directory containing NCBI Taxonomy files, including nodes.dmp, names.dmp, merged.dmp and delnodes.dmp (default \"/home/shenwei/.unikmer\") -h, --help help for unikmer -I, --ignore-taxid ignore taxonomy information -i, --infile-list string file of input files list (one file per line), if given, they are appended to files from cli arguments --max-taxid uint32 for smaller TaxIds, we can use less space to store TaxIds. default value is 1<<32-1, that's enough for NCBI Taxonomy TaxIds (default 4294967295) -C, --no-compress do not compress binary file (not recommended) --nocheck-file do not check binary file, when using process substitution or named pipe -j, --threads int number of CPUs to use (default 4) --verbose print verbose information","title":"unikmer"},{"location":"usage/#count","text":"Generate k-mers (sketch) from FASTA/Q sequences K-mer: 1. K-mer code (k<=32) 2. Hashed k-mer (ntHash) K-mer sketches: 1. Scaled MinHash 2. Minimizer 3. Closed Syncmer Usage: unikmer count [flags] -K -k <k> -u -s [-t <taxid>] <seq files> -o <out prefix> Flags: -K, --canonical only keep the canonical k-mers --circular circular genome -H, --hash save hash of k-mer, automatically on for k>32. This flag overides global flag -c/--compact -h, --help help for count -k, --kmer-len int k-mer length -l, --linear output k-mers in linear order -W, --minimizer-w int minimizer window size -V, --more-verbose print extra verbose information -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -T, --parse-taxid parse taxid from FASTA/Q header -r, --parse-taxid-regexp string regular expression for passing taxid -d, --repeated only count duplicate k-mers, for removing singleton in FASTQ -D, --scale int scale/down-sample factor (default 1) -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored. -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact -S, --syncmer-s int closed syncmer length -t, --taxid uint32 global taxid -u, --unique only count unique k-mers, which are not duplicate","title":"count"},{"location":"usage/#info","text":"Information of binary files Tips: 1. For lots of small files (especially on SDD), use big value of '-j' to parallelize counting. Usage: unikmer info [flags] Aliases: info, stats Flags: -a, --all all information, including number of k-mers -b, --basename only output basename of files -h, --help help for info -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") -e, --skip-err skip error, only show warning message --symbol-false string smybol for false (default \"\u2715\") --symbol-true string smybol for true (default \"\u2713\") -T, --tabular output in machine-friendly tabular format","title":"info"},{"location":"usage/#view","text":"Read and output binary format to plain text Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer view [flags] Flags: -a, --fasta output in FASTA format, with encoded integer as FASTA header -q, --fastq output in FASTQ format, with encoded integer as FASTQ header -g, --genome strings genomes in (gzipped) fasta file(s) for decoding hashed k-mers -h, --help help for view -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\") -n, --show-code show encoded integer along with k-mer -N, --show-code-only only show encoded integers, faster than cutting from result of -n/--show-cde -t, --show-taxid show taxid -T, --show-taxid-only show taxid only","title":"view"},{"location":"usage/#dump","text":"Convert plain k-mer text to binary format Attentions: 1. Input should be one k-mer per line, or tab-delimited two columns with a k-mer and it's taxid. 2. You can also assign a global taxid with flag -t/--taxid. Usage: unikmer dump [flags] Flags: -K, --canonical save the canonical k-mers -O, --canonical-only only save the canonical k-mers. This flag overides -K/--canonical -H, --hash save hash of k-mer, automatically on for k>32. This flag overides global flag -c/--compact --hashed giving hash values of k-mers, This flag overides global flag -c/--compact -h, --help help for dump -k, --kmer-len int k-mer length -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sorted input k-mers are sorted -t, --taxid uint32 global taxid -u, --unique remove duplicate k-mers","title":"dump"},{"location":"usage/#encode","text":"Encode plain k-mer text to integer Usage: unikmer encode [flags] Flags: -a, --all output all data: orginial k-mer, parsed k-mer, encoded integer, encode bits -K, --canonical keep the canonical k-mers -H, --hash save hash of k-mer, automatically on for k>32 -h, --help help for encode -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")","title":"encode"},{"location":"usage/#decode","text":"Decode encoded integer to k-mer text Usage: unikmer decode [flags] Flags: -a, --all output all data: encoded integer, decoded k-mer -h, --help help for decode -k, --kmer-len int k-mer length -o, --out-file string out file (\"-\" for stdout, suffix .gz for gzipped out) (default \"-\")","title":"decode"},{"location":"usage/#concat","text":"Concatenate multiple binary files without removing duplicates Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer concat [flags] Flags: -h, --help help for concat -n, --number int number of k-mers (default -1) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sorted input k-mers are sorted -t, --taxid uint32 global taxid","title":"concat"},{"location":"usage/#inter","text":"Intersection of multiple binary files Attentions: 0. All input files should be sorted, and output file is sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Taxid information could be inconsistent when using flag --mix-taxid. Tips: 1. For comparing TWO files with really huge number of k-mers, you can use 'unikmer sort -u -m 100M' for each file, and then 'unikmer merge -' from them. 2. Put the smallest file in the beginning to reduce memory usage. Usage: unikmer inter [flags] Flags: -h, --help help for inter -m, --mix-taxid allow part of files being whithout taxids -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\")","title":"inter"},{"location":"usage/#common","text":"Find k-mers shared by most of multiple binary files This command is similar to \"unikmer inter\" but with looser restriction, k-mers shared by some number/proportion of multiple files are outputted. Attentions: 0. All input files should be sorted, and output file is sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Taxid information could be inconsistent when using flag --mix-taxid. 3. At most 65535 input files allowed. Tips: 1. For comparing TWO files with really huge number of k-mers, you can use 'unikmer sort -u -m 100M' for each file, and then 'unikmer merge -' from them. 2. Put the smallest file in the beginning to reduce memory usage. Usage: unikmer common [flags] Flags: -h, --help help for common -m, --mix-taxid allow part of files being whithout taxids -n, --number int minimum number of files that share a k-mer (overides -p/--proportion) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -p, --proportion float minimum proportion of files that share a k-mer (default 1)","title":"common"},{"location":"usage/#union","text":"Union of multiple binary files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Tips: 1. 'unikmer sort -u' is slightly faster in cost of more memory usage. 2. For really huge number of k-mers, you can use 'unikmer sort -m 100M -u'. 3. For large number of sorted .unik files, you can use 'unikmer merge'. Usage: unikmer union [flags] Flags: -h, --help help for union -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact","title":"union"},{"location":"usage/#diff","text":"Set difference of multiple binary files Attentions: 0. The first file should be sorted. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. By default taxids in the 2nd and later files are ignored. 3. You can switch on flag -t/--compare-taxid, and input files should ALL have or don't have taxid information. A same k-mer found but query taxid equals to target taxid, or query taxid is ancester of target taxid, this k-mer remains. Tips: 1. Increasing threads number (-j/--threads) to accelerate computation when dealing with lots of files, in cost of more memory occupation. Usage: unikmer diff [flags] Flags: -t, --compare-taxid take taxid into consideration. type unikmer \"diff -h\" for detail -h, --help help for diff -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact","title":"diff"},{"location":"usage/#sort","text":"Sort k-mers in binary files to reduce file size Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Notes: 1. When sorting from large number of files, this command is equivalent to 'unikmer split' + 'unikmer merge'. Tips: 1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size depends on k-mers and file save mode (sorted/compact/normal). 2. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. 3. For sorted input files, the memory usage is very low and speed is fast. Usage: unikmer sort [flags] Flags: -m, --chunk-size string split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer sort -h\" for detail --force overwrite tmp dir -h, --help help for sort -k, --keep-tmp-dir keep tmp dir -M, --max-open-files int max number of open files (default 400) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -d, --repeated only print duplicate k-mers -t, --tmp-dir string directory for intermediate files (default \"./\") -u, --unique remove duplicate k-mers","title":"sort"},{"location":"usage/#split","text":"Split k-mers into sorted chunk files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Tips: 1. You can use '-m/--chunk-size' to limit memory usage, and chunk file size depends on k-mers and file save mode (sorted/compact/normal). 2. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. 3. For sorted input files, the memory usage is very low and speed is fast. Usage: unikmer split [flags] Flags: -m, --chunk-size string split input into chunks of N k-mers, supports K/M/G suffix, type \"unikmer sort -h\" for detail --force overwrite output directory -h, --help help for split -O, --out-dir string output directory -d, --repeated split for further printing duplicate k-mers -u, --unique split for further removing duplicate k-mers","title":"split"},{"location":"usage/#tsplit","text":"Split k-mers according to taxid Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have taxid information. 3. Input files should be sorted using 'unikmer sort'. 4. All k-mers will loaded into RAM, for big input files, you can 'split' them first, 'tsplit' and then 'concat' for every taxid. Tips: 1. Increasing value of -j/--threads can accelerates splitting stage, in cost of more memory occupation. Usage: unikmer tsplit [flags] Flags: --force overwrite output directory -h, --help help for tsplit -O, --out-dir string output directory -o, --out-prefix string out file prefix (default \"tsplit\")","title":"tsplit"},{"location":"usage/#merge","text":"Merge k-mers from sorted chunk files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. 3. Input files should be sorted. Tips: 1. If you don't need to compute unique or repeated k-mers, use 'unikmer concat -s', which is faster. Usage: unikmer merge [flags] Flags: --force overwrite tmp dir -h, --help help for merge -D, --is-dir intput files are directory containing chunk files -k, --keep-tmp-dir keep tmp dir -M, --max-open-files int max number of open files (default 400) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -p, --pattern string chunk file pattern (regular expression) (default \"^chunk_\\\\d+\\\\.unik$\") -d, --repeated only print duplicate k-mers -t, --tmp-dir string directory for intermediate files (default \"./\") -u, --unique remove duplicate k-mers","title":"merge"},{"location":"usage/#head","text":"Extract the first N k-mers Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer head [flags] Flags: -h, --help help for head -n, --number int number of k-mers to extract (default 10) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\")","title":"head"},{"location":"usage/#sample","text":"Sample k-mers from binary files. The Sampling type is fixed sampling. Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Input files should ALL have or don't have taxid information. Usage: unikmer sample [flags] Flags: -h, --help help for sample -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -s, --start int start location (default 1) -w, --window int window size (default 1)","title":"sample"},{"location":"usage/#grep","text":"Search k-mers from binary files Attentions: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Canonical k-mers are used and outputted. 3. Input files should ALL have or don't have taxid information. Tips: 1. Increase value of '-j' for better performance when dealing with lots of files, especially on SDD. 2. For searching using binary .unik file, use 'unikmer inter --mix-taxid', which is faster than 'unikmer grep' in single-thread mode. Usage: unikmer grep [flags] Flags: -D, --degenerate query k-mers contains degenerate base --force overwrite output directory -h, --help help for grep -v, --invert-match invert the sense of matching, to select non-matching records -m, --multiple-outfiles write results into separated files for multiple input files -O, --out-dir string output directory (default \"unikmer-grep\") -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -S, --out-suffix string output suffix (default \".grep\") -q, --query strings query k-mers/taxids (multiple values delimted by comma supported) -f, --query-file strings query file (one k-mer/taxid per line) -t, --query-is-taxid queries are taxids -F, --query-unik-file strings query file in .unik format -d, --repeated only print duplicate k-mers -s, --sort sort k-mers, this significantly reduce file size for k<=25. This flag overides global flag -c/--compact -u, --unique remove duplicate k-mers","title":"grep"},{"location":"usage/#filter","text":"Filter out low-complexity k-mers (experimental) Attentions: 1. This command only detects single base repeat now. Usage: unikmer filter [flags] Flags: -h, --help help for filter -v, --invert invert result, i.e., output low-complexity k-mers -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -d, --penalty-d int penalty for different bases (default 1) -s, --penalty-s int penalty for successive bases (default 3) -t, --threshold int penalty threshold for filter, higher is stricter (default 15) -w, --window int window size for checking penalty (default 7)","title":"filter"},{"location":"usage/#rfilter","text":"Filter k-mers by taxonomic rank Attentions: 1. Flag -L/--lower-than and -H/--higher-than are exclusive, and can be used along with -E/--equal-to which values can be different. 2. A list of pre-ordered ranks is in ~/.unikmer/ranks.txt, you can use your list by -r/--rank-file, the format specification is below. 3. All ranks in taxonomy database should be defined in rank file. 4. Ranks can be removed with black list via -B/--black-list. 5. TaxIds with no rank can be optionally discarded by -N/--discard-noranks. 6. But when filtering with -L/--lower-than, you can use -n/--save-predictable-norank to save some special ranks without order, where rank of the closest higher node is still lower than rank cutoff. Rank file: 1. Blank lines or lines starting with \"#\" are ignored. 2. Ranks are in decending order and case ignored. 3. Ranks with same order should be in one line separated with comma (\",\", no space). 4. Ranks without order should be assigned a prefix symbol \"!\" for each rank. Usage: unikmer rfilter [flags] Flags: -B, --black-list strings black list of ranks to discard, e.g., '\"no rank\", \"clade\"' -N, --discard-noranks discard ranks without order, type \"unikmer filter --help\" for details -R, --discard-root discard root taxid, defined by --root-taxid -E, --equal-to strings output taxIDs with rank equal to some ranks, multiple values can be separated with comma \",\" (e.g., -E \"genus,species\"), or give multiple times (e.g., -E genus -E species) -h, --help help for rfilter -H, --higher-than string output ranks higher than a rank, exclusive with --lower-than --list-order list defined ranks in order --list-ranks list ordered ranks in taxonomy database -L, --lower-than string output ranks lower than a rank, exclusive with --higher-than -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -r, --rank-file string user-defined ordered taxonomic ranks, type \"unikmer rfilter --help\" for details --root-taxid uint32 root taxid (default 1) -n, --save-predictable-norank do not discard some special ranks without order when using -L, where rank of the closest higher node is still lower than rank cutoff","title":"rfilter"},{"location":"usage/#locate","text":"Locate k-mers in genome Attention: 0. All files should have the 'canonical' flag. 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Output is BED6 format. 3. When using experimental flag --circular, leading subsequence of k-1 bp is appending to end of sequence. End position of k-mers that crossing sequence end would be greater than sequence length. Usage: unikmer locate [flags] Flags: --circular circular genome. type \"unikmer locate -h\" for details -g, --genome strings genomes in (gzipped) fasta file(s) -h, --help help for locate -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored.","title":"locate"},{"location":"usage/#uniqs","text":"Mapping k-mers back to genome and find unique subsequences Attention: 1. The 'canonical/scaled/hashed' flags of all files should be consistent. 2. Default output is in BED3 format, with left-closed and right-open 0-based interval. 3. When using flag --circular, end position of subsequences that crossing genome sequence end would be greater than sequence length. Usage: unikmer uniqs [flags] Flags: -M, --allow-multiple-mapped-kmer allow multiple mapped k-mers --circular circular genome. type \"unikmer uniqs -h\" for details -g, --genome strings genomes in (gzipped) fasta file(s) -h, --help help for uniqs -x, --max-cont-non-uniq-kmers int max continuous non-unique k-mers -X, --max-num-cont-non-uniq-kmers int max number of continuous non-unique k-mers -m, --min-len int minimum length of subsequence (default 200) -o, --out-prefix string out file prefix (\"-\" for stdout) (default \"-\") -a, --output-fasta output fasta format instead of BED3 -B, --seq-name-filter strings list of regular expressions for filtering out sequences by header/name, case ignored. -W, --seqs-in-a-file-as-one-genome treat seqs in a genome file as one genome","title":"uniqs"}]}